{
  "description": {
    "spec-version": {
      "Right": ">=1.6"
    },
    "package": {
      "name": "comfort-array",
      "version": [
        0,
        0,
        1
      ]
    },
    "license": {
      "Right": "BSD3"
    },
    "license-files": [
      "LICENSE"
    ],
    "copyright": "",
    "maintainer": "Henning Thielemann <haskell@henning-thielemann.de>",
    "author": "Henning Thielemann <haskell@henning-thielemann.de>",
    "stability": "",
    "tested-with": [
      {
        "compiler": "GHC",
        "versionRange": "==7.4.2"
      },
      {
        "compiler": "GHC",
        "versionRange": "==7.8.4"
      },
      {
        "compiler": "GHC",
        "versionRange": "==8.2.2"
      }
    ],
    "homepage": "http://hub.darcs.net/thielema/comfort-array/",
    "pkg-url": "",
    "bug-reports": "",
    "source-repos": [
      {
        "kind": {},
        "type": "Darcs",
        "location": "http://hub.darcs.net/thielema/comfort-array/",
        "module": null,
        "branch": null,
        "tag": "0.0.1",
        "subdir": null
      },
      {
        "kind": {},
        "type": "Darcs",
        "location": "http://hub.darcs.net/thielema/comfort-array/",
        "module": null,
        "branch": null,
        "tag": null,
        "subdir": null
      }
    ],
    "synopsis": "Arrays where the index type is a function of the shape type",
    "description": "Arrays from the basic @array@ package are already very powerful\ncompared with arrays in other languages.\nIt provides arrays of any dimension in a type safe and uniform way\nwith free choice of the lower bounds (0, 1, or whatever you like).\n\nThis package goes one step further:\nThe shape and the index type are different,\nbut the index type is a type function of the shape type.\nThis offers much more flexibility and type safety.\n\nSome examples are:\n\n* @Range@:\nAllow dynamic choice of lower and upper array bounds\nsuch as in the 'Array's from the @array@ package.\nYou can combine it with other shapes in other dimensions.\nIt allows you to describe the bounds of each dimension individually.\n\n* @Shifted@:\nDescribe array bounds by start index and length.\nIt is sometimes more natural to use these parameters.\nE.g. a non-negative index type like 'Word' cannot represent @-1@\nand thus cannot encode an empty range starting with index @0@.\n\n* @Square@:\nAn 2D array where both dimensions always have equal size.\n\n* @ZeroBased, OneBased@:\nArrays with fixed lower bound, either 0 or 1, respectively.\n\n* Arrays with indices like 'LT', 'EQ', 'GT' and dummy shape.",
    "category": "Data Structures",
    "custom-fields": [],
    "build-type-raw": "Simple",
    "custom-setup": null,
    "library": null,
    "sublibraries": [],
    "executables": [],
    "foreign-libs": [],
    "test-suites": [],
    "benchmarks": [],
    "data-files": [],
    "data-dir": ".",
    "extra-source-files": [],
    "extra-tmp-files": [],
    "extra-doc-files": []
  },
  "library": {
    "condTreeData": {
      "name": {},
      "exposed-modules": [
        [
          "Data",
          "Array",
          "Comfort",
          "Shape"
        ],
        [
          "Data",
          "Array",
          "Comfort",
          "Storable"
        ],
        [
          "Data",
          "Array",
          "Comfort",
          "Storable",
          "Internal"
        ]
      ],
      "re-exported-modules": [],
      "signatures": [],
      "exposed": true,
      "visibility": "LibraryVisibilityPublic",
      "build-info": {
        "buildable": true,
        "buildTools": [],
        "buildToolDepends": [],
        "cppOptions": [],
        "asmOptions": [],
        "cmmOptions": [],
        "ccOptions": [],
        "cxxOptions": [],
        "ldOptions": [],
        "pkgconfigDepends": [],
        "frameworks": [],
        "extraFrameworkDirs": [],
        "asmSources": [],
        "cmmSources": [],
        "cSources": [],
        "cxxSources": [],
        "jsSources": [],
        "hsSourceDirs": [
          "src"
        ],
        "otherModules": [],
        "virtualModules": [],
        "autogenModules": [],
        "defaultLanguage": null,
        "otherLanguages": [],
        "defaultExtensions": [],
        "otherExtensions": [],
        "oldExtensions": [],
        "extraLibs": [],
        "extraGHCiLibs": [],
        "extraBundledLibs": [],
        "extraLibFlavours": [],
        "extraDynLibFlavours": [],
        "extraLibDirs": [],
        "includeDirs": [],
        "includes": [],
        "autogenIncludes": [],
        "installIncludes": [],
        "options": [
          [
            "-Wall"
          ],
          []
        ],
        "profOptions": [
          [],
          []
        ],
        "sharedOptions": [
          [],
          []
        ],
        "staticOptions": [
          [],
          []
        ],
        "customFieldsBI": [],
        "targetBuildDepends": [
          {
            "package-name": "utility-ht",
            "version-range": ">=0.0.10 && <0.1",
            "library": [
              {}
            ]
          },
          {
            "package-name": "base",
            "version-range": ">=4.5 && <5",
            "library": [
              {}
            ]
          }
        ],
        "mixins": []
      }
    },
    "condTreeConstraints": [
      {
        "package-name": "utility-ht",
        "version-range": ">=0.0.10 && <0.1",
        "library": [
          {}
        ]
      },
      {
        "package-name": "base",
        "version-range": ">=4.5 && <5",
        "library": [
          {}
        ]
      }
    ],
    "condTreeComponents": []
  }
}
