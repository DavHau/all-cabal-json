{
  "description": {
    "spec-version": {
      "Left": [
        1,
        18
      ]
    },
    "package": {
      "name": "dunai-core",
      "version": [
        0,
        5,
        1,
        0
      ]
    },
    "license": {
      "Right": "BSD3"
    },
    "license-files": [
      "LICENSE"
    ],
    "copyright": "",
    "maintainer": "programming@manuelbaerenz.de",
    "author": "Ivan Perez, Manuel BÃ¤renz",
    "stability": "",
    "tested-with": [],
    "homepage": "https://github.com/turion/dunai-core",
    "pkg-url": "",
    "bug-reports": "",
    "source-repos": [
      {
        "kind": {},
        "type": "Git",
        "location": "git@github.com:turion/dunai-core",
        "module": null,
        "branch": null,
        "tag": null,
        "subdir": null
      }
    ],
    "synopsis": "Generalised reactive framework supporting classic, arrowized and monadic FRP.\n(Core library fork.)",
    "description": "Dunai is a DSL for strongly-typed CPS-based composable transformations.\n\nDunai is based on a concept of Monadic Stream Functions (MSFs). MSFs are\ntransformations defined by a function @unMSF :: MSF m a b -> a -> m (b, MSF m a b)@\nthat executes one step of a simulation, and produces an output in a monadic\ncontext, and a continuation to be used for future steps.\n\nMSFs are a generalisation of the implementation mechanism used by Yampa,\nWormholes and other FRP and reactive implementations.\n\nWhen combined with different monads, they produce interesting effects. For\nexample, when combined with the @Maybe@ monad, they become transformations\nthat may stop producing outputs (and continuations). The @Either@ monad gives\nrise to MSFs that end with a result (akin to Tasks in Yampa, and Monadic\nFRP).\n\nFlattening, that is, going from some structure @MSF (t m) a b@ to @MSF m a b@\nfor a specific transformer @t@ often gives rise to known FRP constructs. For\ninstance, flattening with @EitherT@ gives rise to switching, and flattening\nwith @ListT@ gives rise to parallelism with broadcasting.\n\nMSFs can be used to implement many FRP variants, including Arrowized FRP,\nClassic FRP, and plain reactive programming. Arrowized and applicative\nsyntax are both supported.\n\nFor a very detailed introduction to MSFs, see:\n<http://dl.acm.org/citation.cfm?id=2976010>\n(mirror: <http://www.cs.nott.ac.uk/~psxip1/#FRPRefactored>).",
    "category": "Reactivity, FRP",
    "custom-fields": [],
    "build-type-raw": "Simple",
    "custom-setup": null,
    "library": null,
    "sublibraries": [],
    "executables": [],
    "foreign-libs": [],
    "test-suites": [],
    "benchmarks": [],
    "data-files": [],
    "data-dir": ".",
    "extra-source-files": [],
    "extra-tmp-files": [],
    "extra-doc-files": []
  },
  "library": {
    "condTreeData": {
      "name": {},
      "exposed-modules": [
        [
          "Control",
          "Monad",
          "Trans",
          "MSF"
        ],
        [
          "Control",
          "Monad",
          "Trans",
          "MSF",
          "Except"
        ],
        [
          "Control",
          "Monad",
          "Trans",
          "MSF",
          "GenLift"
        ],
        [
          "Control",
          "Monad",
          "Trans",
          "MSF",
          "Maybe"
        ],
        [
          "Control",
          "Monad",
          "Trans",
          "MSF",
          "Random"
        ],
        [
          "Control",
          "Monad",
          "Trans",
          "MSF",
          "Reader"
        ],
        [
          "Control",
          "Monad",
          "Trans",
          "MSF",
          "RWS"
        ],
        [
          "Control",
          "Monad",
          "Trans",
          "MSF",
          "State"
        ],
        [
          "Control",
          "Monad",
          "Trans",
          "MSF",
          "Writer"
        ],
        [
          "Data",
          "MonadicStreamFunction"
        ],
        [
          "Data",
          "MonadicStreamFunction",
          "Core"
        ],
        [
          "Data",
          "MonadicStreamFunction",
          "Async"
        ],
        [
          "Data",
          "MonadicStreamFunction",
          "Instances",
          "ArrowChoice"
        ],
        [
          "Data",
          "MonadicStreamFunction",
          "Instances",
          "ArrowLoop"
        ],
        [
          "Data",
          "MonadicStreamFunction",
          "Instances",
          "ArrowPlus"
        ],
        [
          "Data",
          "MonadicStreamFunction",
          "Instances",
          "Num"
        ],
        [
          "Data",
          "MonadicStreamFunction",
          "Instances",
          "VectorSpace"
        ],
        [
          "Data",
          "MonadicStreamFunction",
          "Parallel"
        ],
        [
          "Data",
          "MonadicStreamFunction",
          "ReactHandle"
        ],
        [
          "Data",
          "MonadicStreamFunction",
          "Util"
        ],
        [
          "Data",
          "VectorSpace"
        ]
      ],
      "re-exported-modules": [],
      "signatures": [],
      "exposed": true,
      "visibility": "LibraryVisibilityPublic",
      "build-info": {
        "buildable": true,
        "buildTools": [],
        "buildToolDepends": [],
        "cppOptions": [],
        "asmOptions": [],
        "cmmOptions": [],
        "ccOptions": [],
        "cxxOptions": [],
        "ldOptions": [],
        "pkgconfigDepends": [],
        "frameworks": [],
        "extraFrameworkDirs": [],
        "asmSources": [],
        "cmmSources": [],
        "cSources": [],
        "cxxSources": [],
        "jsSources": [],
        "hsSourceDirs": [
          "src"
        ],
        "otherModules": [
          [
            "Control",
            "Arrow",
            "Util"
          ]
        ],
        "virtualModules": [],
        "autogenModules": [],
        "defaultLanguage": "Haskell2010",
        "otherLanguages": [],
        "defaultExtensions": [],
        "otherExtensions": [],
        "oldExtensions": [],
        "extraLibs": [],
        "extraGHCiLibs": [],
        "extraBundledLibs": [],
        "extraLibFlavours": [],
        "extraDynLibFlavours": [],
        "extraLibDirs": [],
        "includeDirs": [],
        "includes": [],
        "autogenIncludes": [],
        "installIncludes": [],
        "options": [
          [
            "-Wall"
          ],
          []
        ],
        "profOptions": [
          [],
          []
        ],
        "sharedOptions": [
          [],
          []
        ],
        "staticOptions": [
          [],
          []
        ],
        "customFieldsBI": [],
        "targetBuildDepends": [
          {
            "package-name": "base",
            "version-range": ">=4.10 && <4.13",
            "library": [
              {}
            ]
          },
          {
            "package-name": "transformers",
            "version-range": "==0.5.*",
            "library": [
              {}
            ]
          },
          {
            "package-name": "transformers-base",
            "version-range": "==0.4.*",
            "library": [
              {}
            ]
          },
          {
            "package-name": "MonadRandom",
            "version-range": "==0.5.*",
            "library": [
              {}
            ]
          }
        ],
        "mixins": []
      }
    },
    "condTreeConstraints": [
      {
        "package-name": "base",
        "version-range": ">=4.10 && <4.13",
        "library": [
          {}
        ]
      },
      {
        "package-name": "transformers",
        "version-range": "==0.5.*",
        "library": [
          {}
        ]
      },
      {
        "package-name": "transformers-base",
        "version-range": "==0.4.*",
        "library": [
          {}
        ]
      },
      {
        "package-name": "MonadRandom",
        "version-range": "==0.5.*",
        "library": [
          {}
        ]
      }
    ],
    "condTreeComponents": []
  }
}
