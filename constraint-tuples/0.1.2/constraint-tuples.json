{
  "description": {
    "spec-version": {
      "Right": ">=1.10"
    },
    "package": {
      "name": "constraint-tuples",
      "version": [
        0,
        1,
        2
      ]
    },
    "license": {
      "Right": "BSD3"
    },
    "license-files": [
      "LICENSE"
    ],
    "copyright": "(C) 2018-2019 Ryan Scott",
    "maintainer": "ryan.gl.scott@gmail.com",
    "author": "Ryan Scott",
    "stability": "Stable",
    "tested-with": [
      {
        "compiler": "GHC",
        "versionRange": "==7.6.3"
      },
      {
        "compiler": "GHC",
        "versionRange": "==7.8.4"
      },
      {
        "compiler": "GHC",
        "versionRange": "==7.10.3"
      },
      {
        "compiler": "GHC",
        "versionRange": "==8.0.2"
      },
      {
        "compiler": "GHC",
        "versionRange": "==8.2.2"
      },
      {
        "compiler": "GHC",
        "versionRange": "==8.4.4"
      },
      {
        "compiler": "GHC",
        "versionRange": "==8.6.5"
      },
      {
        "compiler": "GHC",
        "versionRange": "==8.8.1"
      }
    ],
    "homepage": "https://github.com/RyanGlScott/constraint-tuples",
    "pkg-url": "",
    "bug-reports": "https://github.com/RyanGlScott/constraint-tuples/issues",
    "source-repos": [
      {
        "kind": {},
        "type": "Git",
        "location": "https://github.com/RyanGlScott/constraint-tuples",
        "module": null,
        "branch": null,
        "tag": null,
        "subdir": null
      }
    ],
    "synopsis": "Partially applicable constraint tuples",
    "description": "This library provides classes and type aliases that\nemulate the behavior of GHC's constraint tuple syntax.\nUnlike GHC's built-in constraint tuples, the types in this\nlibrary can be partially applied.\n\nThis library exposes four different modules that provide\nessentially the same API with slight differences in their\nimplementation:\n\n* \"Data.Tuple.Constraint\": A @CTupleN@ class compiles to\na dictionary data type with @N@ fields.\n\n* \"Data.Tuple.Constraint.ClassNewtype\": A @CTupleN@ class\ncompiles to a newtype around the corresponding built-in\nconstraint tuple type with @N@ arguments.\n\n* @Data.Tuple.Constraint.TypeFamily@: A @CTupleN@ type\nalias is a constraint tuple type constructor with @N@\narguments obtained by way of a type family. This will\ncompile to a built-in constraint tuple, but casted with\na type family axiom.\n\n* @Data.Tuple.Constraint.TypeSynonym@: A @CTupleN@ type\nalias is a constraint tuple type constructor with @N@\narguments obtained by way of a type synonym. This will\ncompile directly to a built-in constraint tuple, but\nbecause this requires use of GHC features only present\non 8.0 or later, this module does not export anything on\nearlier versions of GHC.",
    "category": "Data",
    "custom-fields": [],
    "build-type-raw": "Simple",
    "custom-setup": null,
    "library": null,
    "sublibraries": [],
    "executables": [],
    "foreign-libs": [],
    "test-suites": [],
    "benchmarks": [],
    "data-files": [],
    "data-dir": ".",
    "extra-source-files": [
      "CHANGELOG.md",
      "README.md",
      "GenCTuples.sh",
      "generator-script/LICENSE",
      "generator-script/generator-script.cabal",
      "generator-script/exe/GeneratorScript.hs"
    ],
    "extra-tmp-files": [],
    "extra-doc-files": []
  },
  "library": {
    "condTreeData": {
      "name": {},
      "exposed-modules": [
        [
          "Data",
          "Tuple",
          "Constraint"
        ],
        [
          "Data",
          "Tuple",
          "Constraint",
          "ClassNewtype"
        ],
        [
          "Data",
          "Tuple",
          "Constraint",
          "TypeFamily"
        ],
        [
          "Data",
          "Tuple",
          "Constraint",
          "TypeSynonym"
        ]
      ],
      "re-exported-modules": [],
      "signatures": [],
      "exposed": true,
      "visibility": "LibraryVisibilityPublic",
      "build-info": {
        "buildable": true,
        "buildTools": [],
        "buildToolDepends": [],
        "cppOptions": [],
        "asmOptions": [],
        "cmmOptions": [],
        "ccOptions": [],
        "cxxOptions": [],
        "ldOptions": [],
        "pkgconfigDepends": [],
        "frameworks": [],
        "extraFrameworkDirs": [],
        "asmSources": [],
        "cmmSources": [],
        "cSources": [],
        "cxxSources": [],
        "jsSources": [],
        "hsSourceDirs": [
          "src"
        ],
        "otherModules": [],
        "virtualModules": [],
        "autogenModules": [],
        "defaultLanguage": "Haskell2010",
        "otherLanguages": [],
        "defaultExtensions": [],
        "otherExtensions": [],
        "oldExtensions": [],
        "extraLibs": [],
        "extraGHCiLibs": [],
        "extraBundledLibs": [],
        "extraLibFlavours": [],
        "extraDynLibFlavours": [],
        "extraLibDirs": [],
        "includeDirs": [],
        "includes": [],
        "autogenIncludes": [],
        "installIncludes": [],
        "options": [
          [
            "-Wall"
          ],
          []
        ],
        "profOptions": [
          [],
          []
        ],
        "sharedOptions": [
          [],
          []
        ],
        "staticOptions": [
          [],
          []
        ],
        "customFieldsBI": [],
        "targetBuildDepends": [
          {
            "package-name": "base",
            "version-range": ">=4.6 && <5",
            "library": [
              {}
            ]
          }
        ],
        "mixins": []
      }
    },
    "condTreeConstraints": [
      {
        "package-name": "base",
        "version-range": ">=4.6 && <5",
        "library": [
          {}
        ]
      }
    ],
    "condTreeComponents": []
  }
}
