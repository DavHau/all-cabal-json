{
  "description": {
    "spec-version": {
      "Right": ">=1.10"
    },
    "package": {
      "name": "proxy-kindness",
      "version": [
        0,
        1
      ]
    },
    "license": {
      "Right": "BSD3"
    },
    "license-files": [
      "LICENSE"
    ],
    "copyright": "",
    "maintainer": "brandon.m.simmons@gmail.com",
    "author": "Brandon Simmons",
    "stability": "",
    "tested-with": [],
    "homepage": "https://github.com/jberryman/proxy-kindness",
    "pkg-url": "",
    "bug-reports": "",
    "source-repos": [
      {
        "kind": {},
        "type": "Git",
        "location": "https://github.com/jberryman/proxy-kindness.git",
        "module": null,
        "branch": "master",
        "tag": null,
        "subdir": null
      }
    ],
    "synopsis": "A library for kind-polymorphic manipulation and inspection of Proxy values",
    "description": "It can be useful (especially with @PolyKinds@) to get the\n\\\"bare\\\" type (e.g. @Either@) of some parameterized type\n(e.g. @Either Char Int@). This library provides closed\nclasses that can strip and reapply type arguments, as well\nas useful utility functions. Here are some examples:\n\nForce @Left 1@ to be of type @Either Float a@ using a\npartially-applied 'Proxy'.\n\n>>> let t = (Left 1) `asApplied` (Proxy :: Proxy (Either Float))\n>>> :t t\nt :: Either Float a\n\nDo the same, but illustrating type application with @ap@\n\n>>> let t0 = (Left 1) `asApplied` ((Proxy :: Proxy Either) `ap` (Proxy :: Proxy Float))\n>>> :t t0\nt0 :: Either Float a\n\nForce polymorphic @undefined@ to some polymorphic @Either@\ntype, the base type of @t@ defined above.\n\n>>> let u = undefined `asApplied` (unappliedOf t)\n>>> :t u\nu :: Either a a1",
    "category": "Data",
    "custom-fields": [],
    "build-type-raw": "Simple",
    "custom-setup": null,
    "library": null,
    "sublibraries": [],
    "executables": [],
    "foreign-libs": [],
    "test-suites": [],
    "benchmarks": [],
    "data-files": [],
    "data-dir": ".",
    "extra-source-files": [],
    "extra-tmp-files": [],
    "extra-doc-files": []
  },
  "library": {
    "condTreeData": {
      "name": {},
      "exposed-modules": [
        [
          "Data",
          "Proxy",
          "Kindness"
        ]
      ],
      "re-exported-modules": [],
      "signatures": [],
      "exposed": true,
      "visibility": "LibraryVisibilityPublic",
      "build-info": {
        "buildable": true,
        "buildTools": [],
        "buildToolDepends": [],
        "cppOptions": [],
        "asmOptions": [],
        "cmmOptions": [],
        "ccOptions": [],
        "cxxOptions": [],
        "ldOptions": [],
        "pkgconfigDepends": [],
        "frameworks": [],
        "extraFrameworkDirs": [],
        "asmSources": [],
        "cmmSources": [],
        "cSources": [],
        "cxxSources": [],
        "jsSources": [],
        "hsSourceDirs": [],
        "otherModules": [],
        "virtualModules": [],
        "autogenModules": [],
        "defaultLanguage": "Haskell2010",
        "otherLanguages": [],
        "defaultExtensions": [],
        "otherExtensions": [
          {
            "enable-extension": "PolyKinds"
          },
          {
            "enable-extension": "FunctionalDependencies"
          },
          {
            "enable-extension": "FlexibleInstances"
          },
          {
            "enable-extension": "FlexibleContexts"
          },
          {
            "enable-extension": "OverlappingInstances"
          },
          {
            "enable-extension": "UndecidableInstances"
          },
          {
            "enable-extension": "ScopedTypeVariables"
          },
          {
            "enable-extension": "TypeFamilies"
          }
        ],
        "oldExtensions": [],
        "extraLibs": [],
        "extraGHCiLibs": [],
        "extraBundledLibs": [],
        "extraLibFlavours": [],
        "extraDynLibFlavours": [],
        "extraLibDirs": [],
        "includeDirs": [],
        "includes": [],
        "autogenIncludes": [],
        "installIncludes": [],
        "options": [
          [],
          []
        ],
        "profOptions": [
          [],
          []
        ],
        "sharedOptions": [
          [],
          []
        ],
        "staticOptions": [
          [],
          []
        ],
        "customFieldsBI": [],
        "targetBuildDepends": [
          {
            "package-name": "base",
            "version-range": ">=4.6 && <4.7",
            "library": [
              {}
            ]
          },
          {
            "package-name": "tagged",
            "version-range": "-any",
            "library": [
              {}
            ]
          }
        ],
        "mixins": []
      }
    },
    "condTreeConstraints": [
      {
        "package-name": "base",
        "version-range": ">=4.6 && <4.7",
        "library": [
          {}
        ]
      },
      {
        "package-name": "tagged",
        "version-range": "-any",
        "library": [
          {}
        ]
      }
    ],
    "condTreeComponents": []
  }
}
