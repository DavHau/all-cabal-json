{
  "description": {
    "spec-version": {
      "Right": ">=1.10"
    },
    "package": {
      "name": "dag",
      "version": [
        0,
        1,
        0,
        2
      ]
    },
    "license": {
      "Right": "BSD3"
    },
    "license-files": [
      "LICENSE"
    ],
    "copyright": "",
    "maintainer": "Athan Clark <athan.clark@gmail.com>",
    "author": "Athan Clark <athan.clark@gmail.com>",
    "stability": "",
    "tested-with": [],
    "homepage": "",
    "pkg-url": "",
    "bug-reports": "",
    "source-repos": [
      {
        "kind": {},
        "type": "Git",
        "location": "https://github.com/athanclark/dag",
        "module": null,
        "branch": null,
        "tag": null,
        "subdir": null
      }
    ],
    "synopsis": "Compile-time, type-safe directed acyclic graphs.",
    "description": "This is a type-safe approach for a directed acyclic graph.\n\nEdge construction is incremental, creating a \"schema\":\n\n>  import Data.Graph.DAG.Edge\n>\n>  -- | Edges are statically defined:\n>  edges =\n>    ECons (Edge :: EdgeValue \"foo\" \"bar\") $\n>    ECons (Edge :: EdgeValue \"bar\" \"baz\") $\n>    ECons (Edge :: EdgeValue \"foo\" \"baz\")\n>    unique -- ENil, but casted for uniquely edged graphs\n\nThe nodes are separate from edges; graph may be not connected:\n\n>  data Cool = AllRight\n>            | Radical\n>            | SuperDuper\n>\n>  nodes =\n>    nadd \"foo\" AllRight $\n>    nadd \"bar\" Radical $\n>    nadd \"baz\" SuperDuper $\n>    nempty\n\nSome type tomfoolery:\n\n>  *Data.Graph.DAG> :t edges\n>\n>  edges\n>    :: EdgeSchema\n>         '['EdgeType \"foo\" \"bar\", 'EdgeType \"bar\" \"baz\",\n>           'EdgeType \"foo\" \"baz\"] -- Type list of edges\n>         '['(\"foo\", '[\"bar\", \"baz\"]), '(\"bar\", '[\"baz\"])] -- potential loops\n>         'True -- uniqueness\n>\n>  *Data.Graph.DAG> :t getSpanningTrees $ edges\n>\n>  getSpanningTrees $ edges\n>    :: Data.Proxy.Proxy\n>         '['Node \"foo\" '['Node \"bar\" '['Node \"baz\" '[]]\n>                        ,'Node \"baz\" '[]]\n>          ,'Node \"bar\" '['Node \"baz\" '[]]\n>          ,'Node \"baz\" '[]]\n>\n>  *Data.Graph.DAG> reflect $ getSpanningTrees $ edges\n>\n>    [Node \"foo\" [Node \"bar\" [Node \"baz\" []]\n>                ,Node \"baz\" []]\n>    ,Node \"bar\" [Node \"baz\" []]\n>    ,Node \"baz\" []]\n\nWe can also look at the edges, first-class:\n\n>  *Data.Graph.DAG> fcEdges edges\n>\n>    [(\"foo\",\"bar\"),(\"foo\",\"baz\"),(\"bar\",\"baz\")]\n\nNote that a @NodeSchema@'s keys don't have to be in-sync with it's paired\n@EdgeSchema@. After we have both, we can construct a @DAG@:\n\n>  graph = DAG edges nodes\n\nNow we can do fun things, like get the spanning tree of a node:\n\n>  *Data.Graph.DAG> gtree \"foo\" graph\n>\n>    Just (AllRight :@-> [Radical :@-> [SuperDuper :@-> []]\n>                        ,SuperDuper :@-> []])\n\nThis library is still very naive, but it will give us compile-time enforcement\nof acyclicity (and uniqueness) in these graphs - ideal for dependency graphs.\n\nThe main deficiency of this graph is that our @EdgeSchema@ can't be\n/deconstructed/ soundly - there is just too much information loss between the\nvalue and type levels. This means we can't delete edges or look inside, but we\ncan still add edges or work with the resulting structure.",
    "category": "",
    "custom-fields": [],
    "build-type-raw": "Simple",
    "custom-setup": null,
    "library": null,
    "sublibraries": [],
    "executables": [],
    "foreign-libs": [],
    "test-suites": [],
    "benchmarks": [],
    "data-files": [],
    "data-dir": ".",
    "extra-source-files": [],
    "extra-tmp-files": [],
    "extra-doc-files": []
  },
  "library": {
    "condTreeData": {
      "name": {},
      "exposed-modules": [
        [
          "Data",
          "Graph",
          "DAG"
        ],
        [
          "Data",
          "Graph",
          "DAG",
          "Edge"
        ],
        [
          "Data",
          "Graph",
          "DAG",
          "Edge",
          "Utils"
        ],
        [
          "Data",
          "Graph",
          "DAG",
          "Node"
        ]
      ],
      "re-exported-modules": [],
      "signatures": [],
      "exposed": true,
      "visibility": "LibraryVisibilityPublic",
      "build-info": {
        "buildable": true,
        "buildTools": [],
        "buildToolDepends": [],
        "cppOptions": [],
        "asmOptions": [],
        "cmmOptions": [],
        "ccOptions": [],
        "cxxOptions": [],
        "ldOptions": [],
        "pkgconfigDepends": [],
        "frameworks": [],
        "extraFrameworkDirs": [],
        "asmSources": [],
        "cmmSources": [],
        "cSources": [],
        "cxxSources": [],
        "jsSources": [],
        "hsSourceDirs": [
          "src"
        ],
        "otherModules": [],
        "virtualModules": [],
        "autogenModules": [],
        "defaultLanguage": "Haskell2010",
        "otherLanguages": [],
        "defaultExtensions": [],
        "otherExtensions": [],
        "oldExtensions": [],
        "extraLibs": [],
        "extraGHCiLibs": [],
        "extraBundledLibs": [],
        "extraLibFlavours": [],
        "extraDynLibFlavours": [],
        "extraLibDirs": [],
        "includeDirs": [],
        "includes": [],
        "autogenIncludes": [],
        "installIncludes": [],
        "options": [
          [
            "-Wall"
          ],
          []
        ],
        "profOptions": [
          [],
          []
        ],
        "sharedOptions": [
          [],
          []
        ],
        "staticOptions": [
          [],
          []
        ],
        "customFieldsBI": [],
        "targetBuildDepends": [
          {
            "package-name": "base",
            "version-range": ">=4.7 && <5",
            "library": [
              {}
            ]
          },
          {
            "package-name": "constraints",
            "version-range": "-any",
            "library": [
              {}
            ]
          },
          {
            "package-name": "singletons",
            "version-range": "-any",
            "library": [
              {}
            ]
          }
        ],
        "mixins": []
      }
    },
    "condTreeConstraints": [
      {
        "package-name": "base",
        "version-range": ">=4.7 && <5",
        "library": [
          {}
        ]
      },
      {
        "package-name": "constraints",
        "version-range": "-any",
        "library": [
          {}
        ]
      },
      {
        "package-name": "singletons",
        "version-range": "-any",
        "library": [
          {}
        ]
      }
    ],
    "condTreeComponents": []
  },
  "test-suites": {
    "spec": {
      "condTreeData": {
        "name": "",
        "interface": {
          "version": [
            1,
            0
          ],
          "filepath": "Spec.hs"
        },
        "build-info": {
          "buildable": true,
          "buildTools": [],
          "buildToolDepends": [],
          "cppOptions": [],
          "asmOptions": [],
          "cmmOptions": [],
          "ccOptions": [],
          "cxxOptions": [],
          "ldOptions": [],
          "pkgconfigDepends": [],
          "frameworks": [],
          "extraFrameworkDirs": [],
          "asmSources": [],
          "cmmSources": [],
          "cSources": [],
          "cxxSources": [],
          "jsSources": [],
          "hsSourceDirs": [
            "src",
            "test"
          ],
          "otherModules": [],
          "virtualModules": [],
          "autogenModules": [],
          "defaultLanguage": "Haskell2010",
          "otherLanguages": [],
          "defaultExtensions": [],
          "otherExtensions": [],
          "oldExtensions": [],
          "extraLibs": [],
          "extraGHCiLibs": [],
          "extraBundledLibs": [],
          "extraLibFlavours": [],
          "extraDynLibFlavours": [],
          "extraLibDirs": [],
          "includeDirs": [],
          "includes": [],
          "autogenIncludes": [],
          "installIncludes": [],
          "options": [
            [
              "-Wall"
            ],
            []
          ],
          "profOptions": [
            [],
            []
          ],
          "sharedOptions": [
            [],
            []
          ],
          "staticOptions": [
            [],
            []
          ],
          "customFieldsBI": [],
          "targetBuildDepends": [
            {
              "package-name": "base",
              "version-range": "-any",
              "library": [
                {}
              ]
            },
            {
              "package-name": "hspec",
              "version-range": "-any",
              "library": [
                {}
              ]
            },
            {
              "package-name": "QuickCheck",
              "version-range": "-any",
              "library": [
                {}
              ]
            },
            {
              "package-name": "quickcheck-instances",
              "version-range": "-any",
              "library": [
                {}
              ]
            }
          ],
          "mixins": []
        }
      },
      "condTreeConstraints": [
        {
          "package-name": "base",
          "version-range": "-any",
          "library": [
            {}
          ]
        },
        {
          "package-name": "hspec",
          "version-range": "-any",
          "library": [
            {}
          ]
        },
        {
          "package-name": "QuickCheck",
          "version-range": "-any",
          "library": [
            {}
          ]
        },
        {
          "package-name": "quickcheck-instances",
          "version-range": "-any",
          "library": [
            {}
          ]
        }
      ],
      "condTreeComponents": []
    }
  }
}
