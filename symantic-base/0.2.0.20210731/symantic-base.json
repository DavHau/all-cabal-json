{
  "description": {
    "spec-version": {
      "Left": [
        3,
        0
      ]
    },
    "package": {
      "name": "symantic-base",
      "version": [
        0,
        2,
        0,
        20210731
      ]
    },
    "license": {
      "Left": {
        "license-expression": {
          "expression": {
            "id": "AGPL_3_0_or_later"
          },
          "exception-id": null
        }
      }
    },
    "license-files": [
      "LICENSES/AGPL-3.0-or-later.txt"
    ],
    "copyright": "Julien Moutinho <julm+symantic-base@sourcephile.fr>",
    "maintainer": "Julien Moutinho <julm+symantic-base@sourcephile.fr>",
    "author": "Julien Moutinho <julm+symantic-base@sourcephile.fr>",
    "stability": "experimental",
    "tested-with": [
      {
        "compiler": "GHC",
        "versionRange": "==8.10.4"
      }
    ],
    "homepage": "",
    "pkg-url": "",
    "bug-reports": "https://mails.sourcephile.fr/inbox/symantic-base",
    "source-repos": [
      {
        "kind": {},
        "type": "Git",
        "location": "git://git.sourcephile.fr/haskell/symantic-base",
        "module": null,
        "branch": null,
        "tag": null,
        "subdir": null
      }
    ],
    "synopsis": "Commonly useful symantics for Embedded Domain-Specific Languages (EDSL)",
    "description": "This is a work-in-progress collection of basic tagless-final combinators,\nalong with some advanced utilities to exploit them.\n\n* @Symantic.Lang@\n  gathers commonly used tagless-final combinators\n  (the syntax part of symantics).\n* @Symantic.Data@ is an interpreter enabling to pattern-match on combinators,\n  while keeping their extensibility.\n* @Symantic.Derive@\n  enables to give a default value to combinators which avoids boilerplate code\n  when implementing combinators for an interpreter is factorizable.\n* @Symantic.ObserveSharing@\n  enables to observe Haskell @let@ definitions,\n  turning infinite values into finite ones,\n  which is useful to inspect and optimize recursive grammars for example.\n  Inspired by Andy Gill's [Type-safe observable sharing in Haskell](https://doi.org/10.1145/1596638.1596653).\n  For an example, see [symantic-parser](https://hackage.haskell.org/package/symantic-parser).\n* @Symantic.Reify@\n  enables the lifting to any interpreter\n  of any Haskell functions taking as arguments\n  only polymorphic types (possibly constrained)\n  or functions using such types.\n  Inspired by Oleg Kiselyov's [TDPE.hs](http://okmij.org/ftp/tagless-final/course/TDPE.hs).\n* @Symantic.View@\n  is an interpreter enabling to turn combinators into a human-readable string.\n* @Symantic.ADT@\n  enables to derive reciprocal functions between\n  data-constructors and @Either@s of tuples.\n* @Symantic.CurryN@\n  gathers utilities for currying or uncurrying tuples\n  of size greater or equal to 2.\n* @Symantic.Fixity@\n  gathers utilities for parsing or viewing\n  infix, prefix and postfix combinators.",
    "category": "Data Structures",
    "custom-fields": [],
    "build-type-raw": "Simple",
    "custom-setup": null,
    "library": null,
    "sublibraries": [],
    "executables": [],
    "foreign-libs": [],
    "test-suites": [],
    "benchmarks": [],
    "data-files": [],
    "data-dir": ".",
    "extra-source-files": [
      "cabal.project",
      "default.nix",
      ".envrc",
      "flake.lock",
      "flake.nix",
      "Makefile"
    ],
    "extra-tmp-files": [],
    "extra-doc-files": []
  },
  "library": {
    "condTreeData": {
      "name": {},
      "exposed-modules": [
        [
          "Symantic"
        ],
        [
          "Symantic",
          "ADT"
        ],
        [
          "Symantic",
          "CurryN"
        ],
        [
          "Symantic",
          "Data"
        ],
        [
          "Symantic",
          "Derive"
        ],
        [
          "Symantic",
          "Fixity"
        ],
        [
          "Symantic",
          "Lang"
        ],
        [
          "Symantic",
          "ObserveSharing"
        ],
        [
          "Symantic",
          "Optimize"
        ],
        [
          "Symantic",
          "Reify"
        ],
        [
          "Symantic",
          "View"
        ]
      ],
      "re-exported-modules": [],
      "signatures": [],
      "exposed": true,
      "visibility": "LibraryVisibilityPublic",
      "build-info": {
        "buildable": true,
        "buildTools": [],
        "buildToolDepends": [],
        "cppOptions": [],
        "asmOptions": [],
        "cmmOptions": [],
        "ccOptions": [],
        "cxxOptions": [],
        "ldOptions": [],
        "pkgconfigDepends": [],
        "frameworks": [],
        "extraFrameworkDirs": [],
        "asmSources": [],
        "cmmSources": [],
        "cSources": [],
        "cxxSources": [],
        "jsSources": [],
        "hsSourceDirs": [
          "src"
        ],
        "otherModules": [],
        "virtualModules": [],
        "autogenModules": [],
        "defaultLanguage": "Haskell2010",
        "otherLanguages": [],
        "defaultExtensions": [
          {
            "enable-extension": "DefaultSignatures"
          },
          {
            "enable-extension": "FlexibleContexts"
          },
          {
            "enable-extension": "FlexibleInstances"
          },
          {
            "enable-extension": "GeneralizedNewtypeDeriving"
          },
          {
            "enable-extension": "LambdaCase"
          },
          {
            "enable-extension": "MultiParamTypeClasses"
          },
          {
            "enable-extension": "NamedFieldPuns"
          },
          {
            "disable-extension": "ImplicitPrelude"
          },
          {
            "enable-extension": "RecordWildCards"
          },
          {
            "enable-extension": "ScopedTypeVariables"
          },
          {
            "enable-extension": "TupleSections"
          },
          {
            "enable-extension": "TypeApplications"
          },
          {
            "enable-extension": "TypeFamilies"
          },
          {
            "enable-extension": "TypeOperators"
          }
        ],
        "otherExtensions": [],
        "oldExtensions": [],
        "extraLibs": [],
        "extraGHCiLibs": [],
        "extraBundledLibs": [],
        "extraLibFlavours": [],
        "extraDynLibFlavours": [],
        "extraLibDirs": [],
        "includeDirs": [],
        "includes": [],
        "autogenIncludes": [],
        "installIncludes": [],
        "options": [
          [
            "-Wall",
            "-Wincomplete-uni-patterns",
            "-Wincomplete-record-updates",
            "-Wpartial-fields",
            "-fprint-potential-instances"
          ],
          []
        ],
        "profOptions": [
          [],
          []
        ],
        "sharedOptions": [
          [],
          []
        ],
        "staticOptions": [
          [],
          []
        ],
        "customFieldsBI": [],
        "targetBuildDepends": [
          {
            "package-name": "base",
            "version-range": ">=4.10 && <5",
            "library": [
              {}
            ]
          },
          {
            "package-name": "containers",
            "version-range": "-any",
            "library": [
              {}
            ]
          },
          {
            "package-name": "hashable",
            "version-range": "-any",
            "library": [
              {}
            ]
          },
          {
            "package-name": "template-haskell",
            "version-range": "-any",
            "library": [
              {}
            ]
          },
          {
            "package-name": "transformers",
            "version-range": "-any",
            "library": [
              {}
            ]
          },
          {
            "package-name": "unordered-containers",
            "version-range": "-any",
            "library": [
              {}
            ]
          }
        ],
        "mixins": []
      }
    },
    "condTreeConstraints": [
      {
        "package-name": "base",
        "version-range": ">=4.10 && <5",
        "library": [
          {}
        ]
      },
      {
        "package-name": "containers",
        "version-range": "-any",
        "library": [
          {}
        ]
      },
      {
        "package-name": "hashable",
        "version-range": "-any",
        "library": [
          {}
        ]
      },
      {
        "package-name": "template-haskell",
        "version-range": "-any",
        "library": [
          {}
        ]
      },
      {
        "package-name": "transformers",
        "version-range": "-any",
        "library": [
          {}
        ]
      },
      {
        "package-name": "unordered-containers",
        "version-range": "-any",
        "library": [
          {}
        ]
      }
    ],
    "condTreeComponents": []
  }
}
