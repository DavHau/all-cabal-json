{
  "description": {
    "spec-version": {
      "Right": ">=1.10"
    },
    "package": {
      "name": "base-feature-macros",
      "version": [
        0,
        1,
        0,
        1
      ]
    },
    "license": {
      "Right": "BSD3"
    },
    "license-files": [
      "LICENSE"
    ],
    "copyright": "",
    "maintainer": "hvr@gnu.org",
    "author": "Herbert Valerio Riedel",
    "stability": "",
    "tested-with": [],
    "homepage": "",
    "pkg-url": "",
    "bug-reports": "https://github.com/hvr/base-feature-macros/issues",
    "source-repos": [
      {
        "kind": {},
        "type": "Git",
        "location": "https://github.com/hvr/base-feature-macros.git",
        "module": null,
        "branch": null,
        "tag": null,
        "subdir": null
      }
    ],
    "synopsis": "Semantic CPP feature macros for base",
    "description": "This provides a set of feature macros describing features of @base@ in a semantic way.\n\nSee \\<</package/base-feature-macros/src/base-feature-macros.h base-feature-macros.h>\\> for the set of currently provided macros.\n\nIn order to use the CPP header provided by this package, add this package as a dependency to your @.cabal@ file, i.e.\n\n> build-depends: base-feature-macros: >= 0.1 && < 0.2\n\nwhile making sure that the version specified as lower bound defines the feature-macros your code tests for. This is particularly important as CPP will implicitly treat undefined CPP macros as having the value @0@. See also GNU CPP/CC's @-Wundef@ warning to detect such errors;\nor starting with GHC 8.2, <https://downloads.haskell.org/~ghc/master/users-guide/using-warnings.html#ghc-flag--Wcpp-undef -Wcpp-undef> can be used:\n\n> if impl(ghc >= 8.2)\n>     ghc-options: -Wcpp-undef\n\nThen in your code, you can include and use the @\\<base-feature-macros.h\\>@ header like so\n\n> module M where\n>\n> #include <base-feature-macros.h>\n>\n> #if !HAVE_FOLDABLE_TRAVERSABLE_IN_PRELUDE\n> import Data.Foldable (Foldable (..))\n> import Prelude       hiding (foldr, foldr1)\n> #endif\n> #if !HAVE_MONOID_IN_PRELUDE\n> import Data.Monoid hiding ((<>))\n> #endif\n\nThis package is inspired by the blogpost\n<https://github.com/quchen/articles/blob/master/haskell-cpp-compatibility.md \"Make macros mean something â€“ readable backwards compatibility with CPP\">.",
    "category": "Development",
    "custom-fields": [],
    "build-type-raw": "Simple",
    "custom-setup": null,
    "library": null,
    "sublibraries": [],
    "executables": [],
    "foreign-libs": [],
    "test-suites": [],
    "benchmarks": [],
    "data-files": [],
    "data-dir": ".",
    "extra-source-files": [
      "ChangeLog.md"
    ],
    "extra-tmp-files": [],
    "extra-doc-files": []
  },
  "library": {
    "condTreeData": {
      "name": {},
      "exposed-modules": [],
      "re-exported-modules": [],
      "signatures": [],
      "exposed": true,
      "visibility": "LibraryVisibilityPublic",
      "build-info": {
        "buildable": true,
        "buildTools": [],
        "buildToolDepends": [],
        "cppOptions": [],
        "asmOptions": [],
        "cmmOptions": [],
        "ccOptions": [],
        "cxxOptions": [],
        "ldOptions": [],
        "pkgconfigDepends": [],
        "frameworks": [],
        "extraFrameworkDirs": [],
        "asmSources": [],
        "cmmSources": [],
        "cSources": [],
        "cxxSources": [],
        "jsSources": [],
        "hsSourceDirs": [],
        "otherModules": [],
        "virtualModules": [],
        "autogenModules": [],
        "defaultLanguage": "Haskell2010",
        "otherLanguages": [],
        "defaultExtensions": [],
        "otherExtensions": [],
        "oldExtensions": [],
        "extraLibs": [],
        "extraGHCiLibs": [],
        "extraBundledLibs": [],
        "extraLibFlavours": [],
        "extraDynLibFlavours": [],
        "extraLibDirs": [],
        "includeDirs": [],
        "includes": [],
        "autogenIncludes": [],
        "installIncludes": [
          "base-feature-macros.h"
        ],
        "options": [
          [],
          []
        ],
        "profOptions": [
          [],
          []
        ],
        "sharedOptions": [
          [],
          []
        ],
        "staticOptions": [
          [],
          []
        ],
        "customFieldsBI": [],
        "targetBuildDepends": [
          {
            "package-name": "base",
            "version-range": ">=4.3 && <4.11",
            "library": [
              {}
            ]
          }
        ],
        "mixins": []
      }
    },
    "condTreeConstraints": [
      {
        "package-name": "base",
        "version-range": ">=4.3 && <4.11",
        "library": [
          {}
        ]
      }
    ],
    "condTreeComponents": []
  }
}
