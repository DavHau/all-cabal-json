{
  "description": {
    "spec-version": {
      "Right": ">=1.6.0.1"
    },
    "package": {
      "name": "type-digits",
      "version": [
        0,
        3
      ]
    },
    "license": {
      "Right": "BSD3"
    },
    "license-files": [
      "LICENSE"
    ],
    "copyright": "",
    "maintainer": "Nicolas Frisby <nicolas.frisby@gmail.com>",
    "author": "Nicolas Frisby <nicolas.frisby@gmail.com>",
    "stability": "",
    "tested-with": [],
    "homepage": "",
    "pkg-url": "",
    "bug-reports": "",
    "source-repos": [],
    "synopsis": "Arbitrary-base type-level digits",
    "description": "This is a workaround until type-level literals (specifically\nnaturals) are more fully supported. The main difference is that these\ntypes-level digits and numerals can be inspected/case-discriminated within\ntype family instances. See the @type-ord@ and @type-cereal@ packages for use\ncases; they ultimately support the @yoko@ package.\nArbitrary type-level digits, for when the radix itself doesn't\nactually matter. It's currently base-128, because that seemed to best\nexpedite the compilation of the modules with which I using this\npackage. Please let me know what you find if you experiment with this.\n'Type.Digits.radix' is the (arbitrary) radix. 'Type.Digits.digit' computes\nthe 'NameG' of a digit from its value (assuming its less than the\nradix). Combinators are provided to compute a full type-level numeral from\nvalues (potentially) larger than the radix.\nThe digits themselves all take less significant numeral as an argument. I\nchose this over minimal digits in promoted lists because I wanted to keep the\nactual encoding of type-level numeral smaller; they get quite large with some\nof my uses and the type family computation becomes quite slow.",
    "category": "Type System",
    "custom-fields": [],
    "build-type-raw": "Simple",
    "custom-setup": null,
    "library": null,
    "sublibraries": [],
    "executables": [],
    "foreign-libs": [],
    "test-suites": [],
    "benchmarks": [],
    "data-files": [],
    "data-dir": ".",
    "extra-source-files": [],
    "extra-tmp-files": [],
    "extra-doc-files": []
  },
  "library": {
    "condTreeData": {
      "name": {},
      "exposed-modules": [
        [
          "Type",
          "Digits"
        ],
        [
          "Type",
          "Digits",
          "Aux"
        ],
        [
          "Type",
          "Digits",
          "Stage0"
        ],
        [
          "Type",
          "Digits",
          "Stage1"
        ]
      ],
      "re-exported-modules": [],
      "signatures": [],
      "exposed": true,
      "visibility": "LibraryVisibilityPublic",
      "build-info": {
        "buildable": true,
        "buildTools": [],
        "buildToolDepends": [],
        "cppOptions": [],
        "asmOptions": [],
        "cmmOptions": [],
        "ccOptions": [],
        "cxxOptions": [],
        "ldOptions": [],
        "pkgconfigDepends": [],
        "frameworks": [],
        "extraFrameworkDirs": [],
        "asmSources": [],
        "cmmSources": [],
        "cSources": [],
        "cxxSources": [],
        "jsSources": [],
        "hsSourceDirs": [],
        "otherModules": [],
        "virtualModules": [],
        "autogenModules": [],
        "defaultLanguage": null,
        "otherLanguages": [],
        "defaultExtensions": [],
        "otherExtensions": [],
        "oldExtensions": [],
        "extraLibs": [],
        "extraGHCiLibs": [],
        "extraBundledLibs": [],
        "extraLibFlavours": [],
        "extraDynLibFlavours": [],
        "extraLibDirs": [],
        "includeDirs": [],
        "includes": [],
        "autogenIncludes": [],
        "installIncludes": [],
        "options": [
          [],
          []
        ],
        "profOptions": [
          [],
          []
        ],
        "sharedOptions": [
          [],
          []
        ],
        "staticOptions": [
          [],
          []
        ],
        "customFieldsBI": [],
        "targetBuildDepends": [
          {
            "package-name": "base",
            "version-range": ">=4 && <5",
            "library": [
              {}
            ]
          },
          {
            "package-name": "template-haskell",
            "version-range": "-any",
            "library": [
              {}
            ]
          },
          {
            "package-name": "type-spine",
            "version-range": ">=0.2",
            "library": [
              {}
            ]
          }
        ],
        "mixins": []
      }
    },
    "condTreeConstraints": [
      {
        "package-name": "base",
        "version-range": ">=4 && <5",
        "library": [
          {}
        ]
      },
      {
        "package-name": "template-haskell",
        "version-range": "-any",
        "library": [
          {}
        ]
      },
      {
        "package-name": "type-spine",
        "version-range": ">=0.2",
        "library": [
          {}
        ]
      }
    ],
    "condTreeComponents": []
  }
}
