{
  "description": {
    "spec-version": {
      "Right": ">=1.14"
    },
    "package": {
      "name": "monad-wrap",
      "version": [
        0,
        1
      ]
    },
    "license": {
      "Right": "BSD3"
    },
    "license-files": [
      "LICENSE"
    ],
    "copyright": "",
    "maintainer": "http://www.scs.stanford.edu/~dm/addr/",
    "author": "David Mazieres",
    "stability": "experimental",
    "tested-with": [],
    "homepage": "",
    "pkg-url": "",
    "bug-reports": "",
    "source-repos": [],
    "synopsis": "Wrap functions such as catch around different monads",
    "description": "This package allows you to invoke a function on one monadic\ntype passing it an argument of a different monadic type.  The\ncanonical example is using a function such as @'finally'@ or\n@'bracket'@ to ensure cleanup is run regardless of any\nexceptions thrown by a computation such as @x ::  'ReaderT'\nMyConfig 'IO' b@.  If @x@ uses the 'ReaderT' function 'ask',\nit cannot be re-written to run in the 'IO' monad, and hence\ncannot be executed with a construction like @'lift' (x\n``finally`` cleanup)@.  Instead, you must use the 'wrap'\nmethod, provided by module \"Control.Monad.Wrap\" in this\npackage.\n\nThis package contains several other modules:\n\"Control.Monad.WrapIO\" wraps an IO action through multiple\nmonad transformers.  \"Control.Monad.WrapBase\" generalizes the\nconcept to other base monads besides IO.\n\"Control.Monad.MultiWrap\" implements 'mwrap', a method that\nbehaves like 'wrap' but allows wrapping through multiple\nnested layers of monad transformer.  The module\n\"Control.Monad.MultiLift\" provides 'mlift', a version of\n'lift' that similarly lifts through multiple nested monad\ntransformers.\n\nSince this library was first released, an alternate approach\nwas introduced by the @monad-control@ package.\n@monad-control@ is now the standard.  However, this package,\n@monad-wrap@, stands as an example of accomplishing similar\ngoals with fewer language extensions and less complexity.  In\nparticular, @monad-wrap@ does not use @RankNTypes@ or\n@TypeFamilies@, both required by @monad-control@.  Moreover,\n@monad-wrap@ is much smaller--no 'MonadWrap' method requires\nmore than one line of code.  Both @monad-wrap@ and\n@monad-control@ require @UndecidableInstances@, but\n\"Control.Monad.Wrap\" itself does not require that extension,\nonly the other modules.",
    "category": "Control",
    "custom-fields": [],
    "build-type-raw": "Simple",
    "custom-setup": null,
    "library": null,
    "sublibraries": [],
    "executables": [],
    "foreign-libs": [],
    "test-suites": [],
    "benchmarks": [],
    "data-files": [],
    "data-dir": ".",
    "extra-source-files": [
      "multigen/multigen.hs",
      "multigen/MultiWrap-head.hs",
      "multigen/MultiLift-head.hs",
      "Examples/wrapExample.hs",
      "Examples/multiliftExample.hs",
      "Examples/multiwrapExample.hs"
    ],
    "extra-tmp-files": [],
    "extra-doc-files": []
  },
  "library": {
    "condTreeData": {
      "name": {},
      "exposed-modules": [
        [
          "Control",
          "Monad",
          "Wrap"
        ],
        [
          "Control",
          "Monad",
          "WrapIO"
        ],
        [
          "Control",
          "Monad",
          "WrapBase"
        ],
        [
          "Control",
          "Monad",
          "MultiWrap"
        ],
        [
          "Control",
          "Monad",
          "MultiLift"
        ]
      ],
      "re-exported-modules": [],
      "signatures": [],
      "exposed": true,
      "visibility": "LibraryVisibilityPublic",
      "build-info": {
        "buildable": true,
        "buildTools": [],
        "buildToolDepends": [],
        "cppOptions": [],
        "asmOptions": [],
        "cmmOptions": [],
        "ccOptions": [],
        "cxxOptions": [],
        "ldOptions": [],
        "pkgconfigDepends": [],
        "frameworks": [],
        "extraFrameworkDirs": [],
        "asmSources": [],
        "cmmSources": [],
        "cSources": [],
        "cxxSources": [],
        "jsSources": [],
        "hsSourceDirs": [],
        "otherModules": [],
        "virtualModules": [],
        "autogenModules": [],
        "defaultLanguage": "Haskell2010",
        "otherLanguages": [],
        "defaultExtensions": [],
        "otherExtensions": [
          {
            "enable-extension": "MultiParamTypeClasses"
          },
          {
            "enable-extension": "FlexibleInstances"
          },
          {
            "enable-extension": "FunctionalDependencies"
          },
          {
            "enable-extension": "UndecidableInstances"
          }
        ],
        "oldExtensions": [],
        "extraLibs": [],
        "extraGHCiLibs": [],
        "extraBundledLibs": [],
        "extraLibFlavours": [],
        "extraDynLibFlavours": [],
        "extraLibDirs": [],
        "includeDirs": [],
        "includes": [],
        "autogenIncludes": [],
        "installIncludes": [],
        "options": [
          [],
          []
        ],
        "profOptions": [
          [],
          []
        ],
        "sharedOptions": [
          [],
          []
        ],
        "staticOptions": [
          [],
          []
        ],
        "customFieldsBI": [],
        "targetBuildDepends": [
          {
            "package-name": "base",
            "version-range": "<6",
            "library": [
              {}
            ]
          },
          {
            "package-name": "transformers",
            "version-range": "-any",
            "library": [
              {}
            ]
          }
        ],
        "mixins": []
      }
    },
    "condTreeConstraints": [
      {
        "package-name": "base",
        "version-range": "<6",
        "library": [
          {}
        ]
      },
      {
        "package-name": "transformers",
        "version-range": "-any",
        "library": [
          {}
        ]
      }
    ],
    "condTreeComponents": []
  }
}
