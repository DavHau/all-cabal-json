{
  "description": {
    "spec-version": {
      "Right": ">=1.10"
    },
    "package": {
      "name": "HListPP",
      "version": [
        0,
        2,
        2
      ]
    },
    "license": {
      "Right": "BSD3"
    },
    "license-files": [
      "LICENSE"
    ],
    "copyright": "",
    "maintainer": "Adam Vogt <vogt.adam@gmail.com>",
    "author": "Adam Vogt <vogt.adam@gmail.com>",
    "stability": "",
    "tested-with": [],
    "homepage": "http://github.com/aavogt/HListPP",
    "pkg-url": "",
    "bug-reports": "",
    "source-repos": [
      {
        "kind": {},
        "type": "Git",
        "location": "http://github.com/aavogt/HListPP",
        "module": null,
        "branch": null,
        "tag": null,
        "subdir": null
      }
    ],
    "synopsis": "A preprocessor for HList labelable labels",
    "description": "A preprocessor that replaces @`longDescriptiveName@ with\n\n> hLens' (Label :: Label \"longDescriptiveName\")\n\nUse with ghc flags @-F -pgmF HListPP@. A file using HListPP\ncould start with something like\n\n> ❴-# OPTIONS_GHC -F -pgmF HListPP #-❵ -- change braces to ascii (haddock doesn't allow literal comments in files)\n> ❴-# LANGUAGE DataKinds #-❵\n> import Data.HList.CommonMain\n> import Control.Lens\n\nThen the labels can then be used in expressions with types\nlike:\n\n> `x :: Lens (Record S) (Record T) a b\n> `x :: Prism (Variant S) (Variant T) a b\n> `a .==. \"x\" .*.\n>    `b .==. \"y\" .*. emptyRecord :: Record [ Tagged \"a\" String, Tagged \"b\" String ]\n\nwhere @S@ is a type-level list containing a @Tagged \"x\" a@\nand @T@ is a type-level list containing a @Tagged \"x\" b@.\n\nNote that @`labels@ is expanded to something that\ntakes up about 26 more columns. To avoid issues with\nlayout, put a newline after keywords that introduce\nlayout, at least if there are @`labels@ in the same row.\nIn other words:\n\n> `character.`position.`x %= \\ x -> let\n>      msg = \"a really long message about x>0\"\n>      pos = x - 5\n>    in if pos < 0\n>          then error msg\n>          else pos\n\nInstead of\n\n> `character.`position.`x %= \\ x -> let msg = \"a really long message about x>0\"\n>                                       pos = x - 5\n>                            in if pos < 0\n>                                then error msg\n>                                else pos",
    "category": "Development",
    "custom-fields": [],
    "build-type-raw": "Simple",
    "custom-setup": null,
    "library": null,
    "sublibraries": [],
    "executables": [],
    "foreign-libs": [],
    "test-suites": [],
    "benchmarks": [],
    "data-files": [],
    "data-dir": ".",
    "extra-source-files": [
      "ChangeLog"
    ],
    "extra-tmp-files": [],
    "extra-doc-files": []
  },
  "executables": {
    "HListPP": {
      "condTreeData": {
        "name": "HListPP",
        "module-path": "HListPP.hs",
        "scope": "public",
        "build-info": {
          "buildable": true,
          "buildTools": [],
          "buildToolDepends": [],
          "cppOptions": [],
          "asmOptions": [],
          "cmmOptions": [],
          "ccOptions": [],
          "cxxOptions": [],
          "ldOptions": [],
          "pkgconfigDepends": [],
          "frameworks": [],
          "extraFrameworkDirs": [],
          "asmSources": [],
          "cmmSources": [],
          "cSources": [],
          "cxxSources": [],
          "jsSources": [],
          "hsSourceDirs": [],
          "otherModules": [],
          "virtualModules": [],
          "autogenModules": [],
          "defaultLanguage": "Haskell2010",
          "otherLanguages": [],
          "defaultExtensions": [],
          "otherExtensions": [
            {
              "enable-extension": "QuasiQuotes"
            },
            {
              "enable-extension": "ViewPatterns"
            }
          ],
          "oldExtensions": [],
          "extraLibs": [],
          "extraGHCiLibs": [],
          "extraBundledLibs": [],
          "extraLibFlavours": [],
          "extraDynLibFlavours": [],
          "extraLibDirs": [],
          "includeDirs": [],
          "includes": [],
          "autogenIncludes": [],
          "installIncludes": [],
          "options": [
            [],
            []
          ],
          "profOptions": [
            [],
            []
          ],
          "sharedOptions": [
            [],
            []
          ],
          "staticOptions": [
            [],
            []
          ],
          "customFieldsBI": [],
          "targetBuildDepends": [
            {
              "package-name": "base",
              "version-range": ">=4.9 && <5",
              "library": [
                {}
              ]
            },
            {
              "package-name": "regex-applicative",
              "version-range": ">=0.3 && <0.4",
              "library": [
                {}
              ]
            }
          ],
          "mixins": []
        }
      },
      "condTreeConstraints": [
        {
          "package-name": "base",
          "version-range": ">=4.9 && <5",
          "library": [
            {}
          ]
        },
        {
          "package-name": "regex-applicative",
          "version-range": ">=0.3 && <0.4",
          "library": [
            {}
          ]
        }
      ],
      "condTreeComponents": []
    }
  }
}
