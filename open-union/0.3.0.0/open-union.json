{
  "description": {
    "spec-version": {
      "Right": ">=1.9.2"
    },
    "package": {
      "name": "open-union",
      "version": [
        0,
        3,
        0,
        0
      ]
    },
    "license": {
      "Right": "MIT"
    },
    "license-files": [
      "LICENSE"
    ],
    "copyright": "",
    "maintainer": "benjamin.foppa@gmail.com",
    "author": "Zeke Foppa",
    "stability": "",
    "tested-with": [],
    "homepage": "https://github.com/bfops/open-union",
    "pkg-url": "",
    "bug-reports": "",
    "source-repos": [
      {
        "kind": {},
        "type": "Git",
        "location": "https://github.com/RobotGymnast/open-union.git",
        "module": null,
        "branch": null,
        "tag": null,
        "subdir": null
      }
    ],
    "synopsis": "Extensible, type-safe unions.",
    "description": "Extensible, type-safe unions. This package is very new and likely to change.\n\nBasic usage example (language tags ommitted due to <https://github.com/haskell/cabal/issues/774>)\n\n> import Data.OpenUnion\n\n> type MyUnion = Union '[Char, Int, [()]]\n\n> showMyUnion :: MyUnion -> String\n> showMyUnion\n>     =  (\\(c :: Char) -> \"char: \" ++ show c)\n>     @> (\\(i :: Int) -> \"int: \" ++ show i)\n>     @> (\\(l :: [()]) -> \"list length: \" ++ show (length l))\n>     @> (\\(s :: String) -> \"string: \" ++ s)\n>     @> typesExhausted\n\n> main :: IO ()\n> main = do\n>     putStrLn $ showMyUnion $ liftUnion (4 :: Int)\n>     putStrLn $ showMyUnion $ liftUnion 'a'\n>     putStrLn $ showMyUnion $ liftUnion [(), ()]\n\nwhich prints:\n\n> int: 4\n> char: 'a'\n> list length: 2\n\nCasting to an unrelated type does not cause errors;\nIn the above example,`showMyUnion` contains a `String` case despite `MyUnion` not containing\n`String` - superfluous cases are ignored, for the time being.\n\n`typesExhausted` is NOT a catchall. It is a null case, and using it as a catchall\n(or forgetting to provide a certain case, for instance) will result in an error like:\n\n> example.hs:12:8:\n>     Couldn't match type ‘Int : ('[] :\\ [Char])’ with ‘'[]’\n>     Expected type: Union ('[Int] :\\ String) -> String\n>       Actual type: Union '[] -> String\n>     In the second argument of ‘(@>)’, namely ‘typesExhausted’\n>     In the second argument of ‘(@>)’, namely\n>       ‘(\\ (s :: String) -> \"string: \" ++ s) @> typesExhausted’\n\nThe left-hand parts of the `':` (think type-level `(:)`) are the cases that still need to be satisfied.\n\nTrying to lift an incorrect type to a `Union` will cause an error resembling:\n\n> example.hs:20:30:\n>     No instance for (Data.OpenUnion.Internal.LiftToUnion '[] [Char])\n>       arising from a use of ‘liftUnion’\n>     In the second argument of ‘($)’, namely ‘liftUnion \"asdf\"’\n>     In the second argument of ‘($)’, namely\n>       ‘showMyUnion $ liftUnion \"asdf\"’\n>     In a stmt of a 'do' block:\n>       putStrLn $ showMyUnion $ liftUnion \"asdf\"\n\nThe original use case for this library was code like this (snipped from some record/playback logic):\n\n> type TrackStates = '[Stopped, Recording, Playing]\n>\n> startRecording\n>   :: Union (TrackStates :\\ Recording)\n>   -> ([Note], Union '[Recording])\n\nThe `(:\\\\)` type-level operator is for removal from a set, i.e.\n`startRecording` can be applied to a track in any state except the\n`Recording` state.",
    "category": "Data",
    "custom-fields": [],
    "build-type-raw": "Simple",
    "custom-setup": null,
    "library": null,
    "sublibraries": [],
    "executables": [],
    "foreign-libs": [],
    "test-suites": [],
    "benchmarks": [],
    "data-files": [],
    "data-dir": ".",
    "extra-source-files": [],
    "extra-tmp-files": [],
    "extra-doc-files": []
  },
  "library": {
    "condTreeData": {
      "name": {},
      "exposed-modules": [
        [
          "Data",
          "OpenUnion"
        ],
        [
          "Data",
          "OpenUnion",
          "Internal"
        ]
      ],
      "re-exported-modules": [],
      "signatures": [],
      "exposed": true,
      "visibility": "LibraryVisibilityPublic",
      "build-info": {
        "buildable": true,
        "buildTools": [],
        "buildToolDepends": [],
        "cppOptions": [],
        "asmOptions": [],
        "cmmOptions": [],
        "ccOptions": [],
        "cxxOptions": [],
        "ldOptions": [],
        "pkgconfigDepends": [],
        "frameworks": [],
        "extraFrameworkDirs": [],
        "asmSources": [],
        "cmmSources": [],
        "cSources": [],
        "cxxSources": [],
        "jsSources": [],
        "hsSourceDirs": [
          "."
        ],
        "otherModules": [],
        "virtualModules": [],
        "autogenModules": [],
        "defaultLanguage": null,
        "otherLanguages": [],
        "defaultExtensions": [],
        "otherExtensions": [],
        "oldExtensions": [],
        "extraLibs": [],
        "extraGHCiLibs": [],
        "extraBundledLibs": [],
        "extraLibFlavours": [],
        "extraDynLibFlavours": [],
        "extraLibDirs": [],
        "includeDirs": [],
        "includes": [],
        "autogenIncludes": [],
        "installIncludes": [],
        "options": [
          [
            "-Wall"
          ],
          []
        ],
        "profOptions": [
          [],
          []
        ],
        "sharedOptions": [
          [],
          []
        ],
        "staticOptions": [
          [],
          []
        ],
        "customFieldsBI": [],
        "targetBuildDepends": [
          {
            "package-name": "base",
            "version-range": "==4.*",
            "library": [
              {}
            ]
          },
          {
            "package-name": "type-fun",
            "version-range": "-any",
            "library": [
              {}
            ]
          }
        ],
        "mixins": []
      }
    },
    "condTreeConstraints": [
      {
        "package-name": "base",
        "version-range": "==4.*",
        "library": [
          {}
        ]
      },
      {
        "package-name": "type-fun",
        "version-range": "-any",
        "library": [
          {}
        ]
      }
    ],
    "condTreeComponents": []
  },
  "executables": {
    "example": {
      "condTreeData": {
        "name": "example",
        "module-path": "example.hs",
        "scope": "public",
        "build-info": {
          "buildable": true,
          "buildTools": [],
          "buildToolDepends": [],
          "cppOptions": [],
          "asmOptions": [],
          "cmmOptions": [],
          "ccOptions": [],
          "cxxOptions": [],
          "ldOptions": [],
          "pkgconfigDepends": [],
          "frameworks": [],
          "extraFrameworkDirs": [],
          "asmSources": [],
          "cmmSources": [],
          "cSources": [],
          "cxxSources": [],
          "jsSources": [],
          "hsSourceDirs": [
            "."
          ],
          "otherModules": [],
          "virtualModules": [],
          "autogenModules": [],
          "defaultLanguage": null,
          "otherLanguages": [],
          "defaultExtensions": [],
          "otherExtensions": [],
          "oldExtensions": [],
          "extraLibs": [],
          "extraGHCiLibs": [],
          "extraBundledLibs": [],
          "extraLibFlavours": [],
          "extraDynLibFlavours": [],
          "extraLibDirs": [],
          "includeDirs": [],
          "includes": [],
          "autogenIncludes": [],
          "installIncludes": [],
          "options": [
            [
              "-Wall",
              "-O2"
            ],
            []
          ],
          "profOptions": [
            [],
            []
          ],
          "sharedOptions": [
            [],
            []
          ],
          "staticOptions": [
            [],
            []
          ],
          "customFieldsBI": [],
          "targetBuildDepends": [
            {
              "package-name": "base",
              "version-range": "==4.*",
              "library": [
                {}
              ]
            },
            {
              "package-name": "type-fun",
              "version-range": "-any",
              "library": [
                {}
              ]
            },
            {
              "package-name": "open-union",
              "version-range": "-any",
              "library": [
                {}
              ]
            }
          ],
          "mixins": []
        }
      },
      "condTreeConstraints": [
        {
          "package-name": "base",
          "version-range": "==4.*",
          "library": [
            {}
          ]
        },
        {
          "package-name": "type-fun",
          "version-range": "-any",
          "library": [
            {}
          ]
        },
        {
          "package-name": "open-union",
          "version-range": "-any",
          "library": [
            {}
          ]
        }
      ],
      "condTreeComponents": []
    }
  }
}
