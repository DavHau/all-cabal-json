{
  "description": {
    "spec-version": {
      "Right": ">=1.10"
    },
    "package": {
      "name": "validated-literals",
      "version": [
        0,
        2,
        0,
        1
      ]
    },
    "license": {
      "Right": "BSD3"
    },
    "license-files": [
      "LICENSE"
    ],
    "copyright": "Copyright Â© 2015-2018 Merijn Verstraaten",
    "maintainer": "Merijn Verstraaten <merijn@inconsistent.nl>",
    "author": "Merijn Verstraaten",
    "stability": "",
    "tested-with": [
      {
        "compiler": "GHC",
        "versionRange": "==7.10.3"
      },
      {
        "compiler": "GHC",
        "versionRange": "==8.0.2"
      },
      {
        "compiler": "GHC",
        "versionRange": "==8.2.2"
      },
      {
        "compiler": "GHC",
        "versionRange": "==8.4.3"
      },
      {
        "compiler": "GHC",
        "versionRange": "==8.6.1"
      }
    ],
    "homepage": "https://github.com/merijn/validated-literals",
    "pkg-url": "",
    "bug-reports": "https://github.com/merijn/validated-literals/issues",
    "source-repos": [
      {
        "kind": {},
        "type": "Mercurial",
        "location": "https://bitbucket.org/merijnv/validated-literals",
        "module": null,
        "branch": null,
        "tag": null,
        "subdir": null
      },
      {
        "kind": {},
        "type": "Git",
        "location": "git+ssh://github.com:merijn/validated-literals",
        "module": null,
        "branch": null,
        "tag": null,
        "subdir": null
      }
    ],
    "synopsis": "Compile-time checking for partial smart-constructors",
    "description": "To disallow invalid input it is common to define (new)types with hidden\ndata constructors. Forcing the user to go through a smart-constructor that\nenforces invariants and returns @Maybe ResultType@, preventing the\nconstruction of data with invalid values.\n\nHowever, it is __also__ common to want to include literal values of such\ntypes in source text. Things of textual literals for HTML, HTTP, etc.\nIn such cases smart-constructors force us to handle potential conversion\nfailures at runtime, or abusing functions like @fromJust@ to break away all\nthe safety smart-constructors provide. All this despite the fact that we\ncan statically know at compile time that the conversion will always succeed\nor always fails.\n\nThis package provides a typeclasses for using TH to validate the\ncorrectness of provided literals at compile. This lets you define, e.g.,\n@newtype Even = Even Integer@ and write:\n\n@\nx :: Even\nx = $$(valid 38)\n@\n\nThis will check, at compile time, that the provided @Integer@ is, in fact,\neven and unwrap it from @Maybe@, avoiding the runtime check.",
    "category": "Data",
    "custom-fields": [],
    "build-type-raw": "Simple",
    "custom-setup": null,
    "library": null,
    "sublibraries": [],
    "executables": [],
    "foreign-libs": [],
    "test-suites": [],
    "benchmarks": [],
    "data-files": [],
    "data-dir": ".",
    "extra-source-files": [
      "README.md",
      "CHANGELOG.md"
    ],
    "extra-tmp-files": [],
    "extra-doc-files": []
  },
  "library": {
    "condTreeData": {
      "name": {},
      "exposed-modules": [
        [
          "ValidLiterals"
        ],
        [
          "ValidLiterals",
          "Class"
        ]
      ],
      "re-exported-modules": [],
      "signatures": [],
      "exposed": true,
      "visibility": "LibraryVisibilityPublic",
      "build-info": {
        "buildable": true,
        "buildTools": [],
        "buildToolDepends": [],
        "cppOptions": [],
        "asmOptions": [],
        "cmmOptions": [],
        "ccOptions": [],
        "cxxOptions": [],
        "ldOptions": [],
        "pkgconfigDepends": [],
        "frameworks": [],
        "extraFrameworkDirs": [],
        "asmSources": [],
        "cmmSources": [],
        "cSources": [],
        "cxxSources": [],
        "jsSources": [],
        "hsSourceDirs": [],
        "otherModules": [],
        "virtualModules": [],
        "autogenModules": [],
        "defaultLanguage": "Haskell2010",
        "otherLanguages": [],
        "defaultExtensions": [],
        "otherExtensions": [
          {
            "enable-extension": "DefaultSignatures"
          },
          {
            "enable-extension": "FlexibleContexts"
          },
          {
            "enable-extension": "MultiParamTypeClasses"
          },
          {
            "enable-extension": "TemplateHaskell"
          }
        ],
        "oldExtensions": [],
        "extraLibs": [],
        "extraGHCiLibs": [],
        "extraBundledLibs": [],
        "extraLibFlavours": [],
        "extraDynLibFlavours": [],
        "extraLibDirs": [],
        "includeDirs": [],
        "includes": [],
        "autogenIncludes": [],
        "installIncludes": [],
        "options": [
          [
            "-Wall"
          ],
          []
        ],
        "profOptions": [
          [],
          []
        ],
        "sharedOptions": [
          [],
          []
        ],
        "staticOptions": [
          [],
          []
        ],
        "customFieldsBI": [],
        "targetBuildDepends": [
          {
            "package-name": "base",
            "version-range": ">=4.8 && <4.12",
            "library": [
              {}
            ]
          },
          {
            "package-name": "template-haskell",
            "version-range": "-any",
            "library": [
              {}
            ]
          }
        ],
        "mixins": []
      }
    },
    "condTreeConstraints": [
      {
        "package-name": "base",
        "version-range": ">=4.8 && <4.12",
        "library": [
          {}
        ]
      },
      {
        "package-name": "template-haskell",
        "version-range": "-any",
        "library": [
          {}
        ]
      }
    ],
    "condTreeComponents": []
  },
  "test-suites": {
    "examples": {
      "condTreeData": {
        "name": "",
        "interface": {
          "version": [
            1,
            0
          ],
          "filepath": "Examples.hs"
        },
        "build-info": {
          "buildable": true,
          "buildTools": [],
          "buildToolDepends": [],
          "cppOptions": [],
          "asmOptions": [],
          "cmmOptions": [],
          "ccOptions": [],
          "cxxOptions": [],
          "ldOptions": [],
          "pkgconfigDepends": [],
          "frameworks": [],
          "extraFrameworkDirs": [],
          "asmSources": [],
          "cmmSources": [],
          "cSources": [],
          "cxxSources": [],
          "jsSources": [],
          "hsSourceDirs": [
            "examples"
          ],
          "otherModules": [
            [
              "ByteString"
            ],
            [
              "Even"
            ]
          ],
          "virtualModules": [],
          "autogenModules": [],
          "defaultLanguage": "Haskell2010",
          "otherLanguages": [],
          "defaultExtensions": [],
          "otherExtensions": [
            {
              "enable-extension": "TemplateHaskell"
            }
          ],
          "oldExtensions": [],
          "extraLibs": [],
          "extraGHCiLibs": [],
          "extraBundledLibs": [],
          "extraLibFlavours": [],
          "extraDynLibFlavours": [],
          "extraLibDirs": [],
          "includeDirs": [],
          "includes": [],
          "autogenIncludes": [],
          "installIncludes": [],
          "options": [
            [
              "-Wall",
              "-fno-warn-unused-do-bind"
            ],
            []
          ],
          "profOptions": [
            [],
            []
          ],
          "sharedOptions": [
            [],
            []
          ],
          "staticOptions": [
            [],
            []
          ],
          "customFieldsBI": [],
          "targetBuildDepends": [
            {
              "package-name": "base",
              "version-range": "-any",
              "library": [
                {}
              ]
            },
            {
              "package-name": "bytestring",
              "version-range": "==0.10.*",
              "library": [
                {}
              ]
            },
            {
              "package-name": "deepseq",
              "version-range": "==1.4.*",
              "library": [
                {}
              ]
            },
            {
              "package-name": "tasty",
              "version-range": ">=0.11 && <1.1",
              "library": [
                {}
              ]
            },
            {
              "package-name": "tasty-hunit",
              "version-range": "==0.9.*",
              "library": [
                {}
              ]
            },
            {
              "package-name": "tasty-travis",
              "version-range": ">=0.2 && <0.3",
              "library": [
                {}
              ]
            },
            {
              "package-name": "template-haskell",
              "version-range": "-any",
              "library": [
                {}
              ]
            },
            {
              "package-name": "validated-literals",
              "version-range": "-any",
              "library": [
                {}
              ]
            }
          ],
          "mixins": []
        }
      },
      "condTreeConstraints": [
        {
          "package-name": "base",
          "version-range": "-any",
          "library": [
            {}
          ]
        },
        {
          "package-name": "bytestring",
          "version-range": "==0.10.*",
          "library": [
            {}
          ]
        },
        {
          "package-name": "deepseq",
          "version-range": "==1.4.*",
          "library": [
            {}
          ]
        },
        {
          "package-name": "tasty",
          "version-range": ">=0.11 && <1.1",
          "library": [
            {}
          ]
        },
        {
          "package-name": "tasty-hunit",
          "version-range": "==0.9.*",
          "library": [
            {}
          ]
        },
        {
          "package-name": "tasty-travis",
          "version-range": ">=0.2 && <0.3",
          "library": [
            {}
          ]
        },
        {
          "package-name": "template-haskell",
          "version-range": "-any",
          "library": [
            {}
          ]
        },
        {
          "package-name": "validated-literals",
          "version-range": "-any",
          "library": [
            {}
          ]
        }
      ],
      "condTreeComponents": []
    }
  }
}
