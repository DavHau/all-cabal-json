{
  "description": {
    "spec-version": {
      "Right": ">=1.2.0"
    },
    "package": {
      "name": "directory-tree",
      "version": [
        0,
        2,
        1
      ]
    },
    "license": {
      "Right": "BSD3"
    },
    "license-files": [
      "LICENSE"
    ],
    "copyright": "(c) 2010, Brandon Simmons <brandon.m.simmons@gmail.com>",
    "maintainer": "Brandon Simmons <brandon.m.simmons@gmail.com>",
    "author": "Brandon Simmons",
    "stability": "",
    "tested-with": [
      {
        "compiler": "GHC",
        "versionRange": "<=6.12.1"
      }
    ],
    "homepage": "http://coder.bsimmons.name/blog/2009/05/directory-tree-module-released/",
    "pkg-url": "",
    "bug-reports": "",
    "source-repos": [],
    "synopsis": "A simple directory-like tree datatype, with useful IO functions ",
    "description": "A simple directory-like tree datatype, with useful IO functions and Foldable and Traversable instance\n\nProvides a simple data structure mirroring a directory tree on the\nfilesystem, as well as useful functions for reading and writing\nfile and directory structures in the IO monad.\n\nImporting the library and optional (useful) Foldable and Traverable libraries:\n\n> import System.Directory.Tree\n> import qualified Data.Foldable as F\n> import qualified Data.Traversable as T\n\nWrite a hand-made directory tree of textfiles (strings) to the disk.\nSimulates creating a new user Tux's home directory on a unix machine:\n\n> writeDirectory$ \"/home\" :/ Dir \"Tux\" [File \"README\" \"Welcome!\"]\n\n\"read\" a directory by opening all the files at a filepath with readFile,\nreturning an 'AnchoredDirTree String' (d2). Then check for any IO failures:\n\n> do (base :/ d2) <- readDirectory \"../parent_dir/dir2/\"\n>    let failed = anyFailed d2\n>    if failed then ...\n\nUse Foldable instance function to concat a directory 'dir' of text files into a\nsingle file under the same directory:\n\n> do (b :/ dt) <- readDirectory dir\n>    let f = F.concat dt\n>    return$ b :/ File \"ALL_TEXT\" f\n\nOpen all the files in the current directory as lazy bytestrings, ignoring\nthe base path in Anchored wrapper:\n\n> import qualified Data.ByteString.Lazy as B\n> do (_ :/ dTree) <- readDirectoryWith B.readFile \"./\"\n\n*NOTE:* the IO functions like `readDirectoryWith` in this library use standard lazy IO\nIOfunctions and will (necessarily) traverse an entire system directory tree before\nreturning a DirTree constructor. This unfortunately makes it not suitable for large\ndirectory trees.\nAny ideas or suggestions for improvements would be most welcomed :-)\n",
    "category": "Data, System",
    "custom-fields": [],
    "build-type-raw": "Simple",
    "custom-setup": null,
    "library": null,
    "sublibraries": [],
    "executables": [],
    "foreign-libs": [],
    "test-suites": [],
    "benchmarks": [],
    "data-files": [],
    "data-dir": ".",
    "extra-source-files": [
      "examples.hs"
    ],
    "extra-tmp-files": [],
    "extra-doc-files": []
  },
  "library": {
    "condTreeData": {
      "name": {},
      "exposed-modules": [
        [
          "System",
          "Directory",
          "Tree"
        ]
      ],
      "re-exported-modules": [],
      "signatures": [],
      "exposed": true,
      "visibility": "LibraryVisibilityPublic",
      "build-info": {
        "buildable": true,
        "buildTools": [],
        "buildToolDepends": [],
        "cppOptions": [],
        "asmOptions": [],
        "cmmOptions": [],
        "ccOptions": [],
        "cxxOptions": [],
        "ldOptions": [],
        "pkgconfigDepends": [],
        "frameworks": [],
        "extraFrameworkDirs": [],
        "asmSources": [],
        "cmmSources": [],
        "cSources": [],
        "cxxSources": [],
        "jsSources": [],
        "hsSourceDirs": [],
        "otherModules": [],
        "virtualModules": [],
        "autogenModules": [],
        "defaultLanguage": null,
        "otherLanguages": [],
        "defaultExtensions": [],
        "otherExtensions": [],
        "oldExtensions": [],
        "extraLibs": [],
        "extraGHCiLibs": [],
        "extraBundledLibs": [],
        "extraLibFlavours": [],
        "extraDynLibFlavours": [],
        "extraLibDirs": [],
        "includeDirs": [],
        "includes": [],
        "autogenIncludes": [],
        "installIncludes": [],
        "options": [
          [
            "-Wall"
          ],
          []
        ],
        "profOptions": [
          [],
          []
        ],
        "sharedOptions": [
          [],
          []
        ],
        "staticOptions": [
          [],
          []
        ],
        "customFieldsBI": [],
        "targetBuildDepends": [
          {
            "package-name": "base",
            "version-range": "<5",
            "library": [
              {}
            ]
          },
          {
            "package-name": "filepath",
            "version-range": "<2",
            "library": [
              {}
            ]
          },
          {
            "package-name": "directory",
            "version-range": "<2",
            "library": [
              {}
            ]
          }
        ],
        "mixins": []
      }
    },
    "condTreeConstraints": [
      {
        "package-name": "base",
        "version-range": "<5",
        "library": [
          {}
        ]
      },
      {
        "package-name": "filepath",
        "version-range": "<2",
        "library": [
          {}
        ]
      },
      {
        "package-name": "directory",
        "version-range": "<2",
        "library": [
          {}
        ]
      }
    ],
    "condTreeComponents": []
  }
}
