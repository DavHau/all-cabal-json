{
  "description": {
    "spec-version": {
      "Right": ">=1.10"
    },
    "package": {
      "name": "simple-effects",
      "version": [
        0,
        13,
        0,
        0
      ]
    },
    "license": {
      "Right": "BSD3"
    },
    "license-files": [
      "LICENSE"
    ],
    "copyright": "2018 Luka Horvat",
    "maintainer": "luka.horvat9@gmail.com",
    "author": "Luka Horvat",
    "stability": "",
    "tested-with": [],
    "homepage": "https://gitlab.com/LukaHorvat/simple-effects",
    "pkg-url": "",
    "bug-reports": "",
    "source-repos": [],
    "synopsis": "A simple effect system that integrates with MTL",
    "description": "Some of the things you can do with this package:\n\n* Declare and check which side-effects your function uses\n* Dependency injection\n* Test effectful code\n* Avoid the \\(n \\times k\\) instance problem\n* Define custom effects with very little programming overhead\n\n=== Declare and check which side-effects your function uses\n\nThe library provides a nice, declarative way of specifying exactly what your monadic function\ndoes.\n\n> getProductAndWriteToFile :: MonadEffects '[Database, FileSystem] m => ProductId -> FilePath -> m ()\n\nThis way you can be sure that your @harmlessFunction@ doesn't do unexpected things behind your\nback. The compiler makes sure that all the effects are accounted for in the function's type.\n\n=== Dependency injection\n\nFunctions are not tied to any specific implementation of an effect meaning you can swap out\ndifferent implementations without changing your code. Code like this\n\n> myFunction :: MonadEffects '[Time, Logging] m => m ()\n> myFunction = do\n>     t <- getCurrentTime\n>     log (show t)\n\nis effectively the same as\n\n> myFunction :: Monad m => m ZonedTime -> (String -> m ()) -> m ()\n> myFunction getCurrentTime log = do\n>     t <- getCurrentTime\n>     log (show t)\n\nbut the library does all the parameter passing for you. And just like you'd be able to\nprovide any implementation as @getCurrentTime@ and @log@ parameters you can do the same with\nsimple effects.\n\n> myFunction\n>     & implement (TimeMethods someCurrentTimeImplementation)\n>     & implement (LoggingMethods someLoggingImplementation)\n\n=== Test effectful code\n\nEasily provide dummy implementations of your effects to prevent missle-launching during testing.\n\n> myEffectfulFunction :: MonadEffects '[Database, Missiles] m => m Int\n>\n> main = do\n>     conn <- connectToDb \"connStr\"\n>     myEffectfulFunction\n>         & implement (realDatabase conn)\n>         & implement (MissilesMethods (launchMissles \"access codes\"))\n>\n> spec = do\n>     res <- myEffectfulFunction\n>         & implement (fakeDb Map.empty)\n>         & implement (MissilesMethods (print \"Totally launching missiles\"))\n>     when (res /= 42) (error \"Test failed!\")\n\n=== Avoid the \\(n \\times k\\) instance problem\n\nAny effect you define is automatically liftable through any transformer. Most @MonadX@ instances\nyou'd write would look like @func a b c = lift (func a b c)@, so why would you have to write them\nyourself? @simple-effects@ does it for you using an overlappable instance.\n\nWhat about effects that aren't that simple? Each effect can specify a constraint on the transformers\nthat it can be lifted through and a mechanism that does the lifting. So you get all the benefits\nof automatic lifting of simple effects and retain all of the flexibility of complex ones.\n\n=== Define custom effects with very little programming overhead\n\nLets say we need a way to get coordinates for some address. Here's how we'd declare that\nfunctionality.\n\n@\ndata Geolocation m = GeolocationMethods\n&#32;   &#x7b; _getLocation :: Address -> m Coordinates &#x7d;\n&#32;   deriving (Generic, Effect)\ngetLocation :: MonadEffect Geolocation m => Address -> m Coordinates\ngetLocation = _getLocation effect\n@\n\nThat's all you need to start using your effect in functions.\n\n> getUsersLocation :: (MonadEffect Geolocation m, MonadIO m) => m Coordinates\n> getUsersLocation = do\n>     liftIO $ putStrLn \"Please enter your address:\"\n>     addr <- liftIO readLn\n>     getLocation addr\n\n==== <docs/Tutorial-T1_Introduction.html Check out the tutorial modules for more details>\n",
    "category": "Control",
    "custom-fields": [
      [
        "x-revision",
        "1"
      ]
    ],
    "build-type-raw": "Simple",
    "custom-setup": null,
    "library": null,
    "sublibraries": [],
    "executables": [],
    "foreign-libs": [],
    "test-suites": [],
    "benchmarks": [],
    "data-files": [],
    "data-dir": ".",
    "extra-source-files": [
      "CHANGELOG.md"
    ],
    "extra-tmp-files": [],
    "extra-doc-files": []
  },
  "library": {
    "condTreeData": {
      "name": {},
      "exposed-modules": [
        [
          "Control",
          "Effects"
        ],
        [
          "Control",
          "Effects",
          "State"
        ],
        [
          "Control",
          "Effects",
          "Reader"
        ],
        [
          "Control",
          "Effects",
          "List"
        ],
        [
          "Control",
          "Effects",
          "Signal"
        ],
        [
          "Control",
          "Effects",
          "Early"
        ],
        [
          "Control",
          "Effects",
          "Generic"
        ],
        [
          "Control",
          "Effects",
          "Async"
        ],
        [
          "Control",
          "Effects",
          "Yield"
        ],
        [
          "Control",
          "Effects",
          "Resource"
        ],
        [
          "Control",
          "Effects",
          "Newtype"
        ],
        [
          "Control",
          "Monad",
          "Runnable"
        ],
        [
          "Tutorial",
          "T1_Introduction"
        ],
        [
          "Tutorial",
          "T2_Details"
        ],
        [
          "Tutorial",
          "T3_CustomEffects"
        ]
      ],
      "re-exported-modules": [],
      "signatures": [],
      "exposed": true,
      "visibility": "LibraryVisibilityPublic",
      "build-info": {
        "buildable": true,
        "buildTools": [],
        "buildToolDepends": [],
        "cppOptions": [],
        "asmOptions": [],
        "cmmOptions": [],
        "ccOptions": [],
        "cxxOptions": [],
        "ldOptions": [],
        "pkgconfigDepends": [],
        "frameworks": [],
        "extraFrameworkDirs": [],
        "asmSources": [],
        "cmmSources": [],
        "cSources": [],
        "cxxSources": [],
        "jsSources": [],
        "hsSourceDirs": [
          "src"
        ],
        "otherModules": [
          [
            "Import"
          ],
          [
            "Tutorial",
            "Test"
          ]
        ],
        "virtualModules": [],
        "autogenModules": [],
        "defaultLanguage": "Haskell2010",
        "otherLanguages": [],
        "defaultExtensions": [],
        "otherExtensions": [],
        "oldExtensions": [],
        "extraLibs": [],
        "extraGHCiLibs": [],
        "extraBundledLibs": [],
        "extraLibFlavours": [],
        "extraDynLibFlavours": [],
        "extraLibDirs": [],
        "includeDirs": [],
        "includes": [],
        "autogenIncludes": [],
        "installIncludes": [],
        "options": [
          [
            "-Wall",
            "-O2"
          ],
          []
        ],
        "profOptions": [
          [],
          []
        ],
        "sharedOptions": [
          [],
          []
        ],
        "staticOptions": [
          [],
          []
        ],
        "customFieldsBI": [],
        "targetBuildDepends": [
          {
            "package-name": "base",
            "version-range": ">=4.7 && <5",
            "library": [
              {}
            ]
          },
          {
            "package-name": "transformers",
            "version-range": "-any",
            "library": [
              {}
            ]
          },
          {
            "package-name": "mtl",
            "version-range": "-any",
            "library": [
              {}
            ]
          },
          {
            "package-name": "monad-control",
            "version-range": "==1.0.*",
            "library": [
              {}
            ]
          },
          {
            "package-name": "transformers-base",
            "version-range": "==0.4.*",
            "library": [
              {}
            ]
          },
          {
            "package-name": "list-t",
            "version-range": "-any",
            "library": [
              {}
            ]
          },
          {
            "package-name": "array",
            "version-range": "-any",
            "library": [
              {}
            ]
          },
          {
            "package-name": "MonadRandom",
            "version-range": "-any",
            "library": [
              {}
            ]
          },
          {
            "package-name": "exceptions",
            "version-range": "-any",
            "library": [
              {}
            ]
          },
          {
            "package-name": "text",
            "version-range": "-any",
            "library": [
              {}
            ]
          },
          {
            "package-name": "bytestring",
            "version-range": "-any",
            "library": [
              {}
            ]
          },
          {
            "package-name": "async",
            "version-range": "-any",
            "library": [
              {}
            ]
          }
        ],
        "mixins": []
      }
    },
    "condTreeConstraints": [
      {
        "package-name": "base",
        "version-range": ">=4.7 && <5",
        "library": [
          {}
        ]
      },
      {
        "package-name": "transformers",
        "version-range": "-any",
        "library": [
          {}
        ]
      },
      {
        "package-name": "mtl",
        "version-range": "-any",
        "library": [
          {}
        ]
      },
      {
        "package-name": "monad-control",
        "version-range": "==1.0.*",
        "library": [
          {}
        ]
      },
      {
        "package-name": "transformers-base",
        "version-range": "==0.4.*",
        "library": [
          {}
        ]
      },
      {
        "package-name": "list-t",
        "version-range": "-any",
        "library": [
          {}
        ]
      },
      {
        "package-name": "array",
        "version-range": "-any",
        "library": [
          {}
        ]
      },
      {
        "package-name": "MonadRandom",
        "version-range": "-any",
        "library": [
          {}
        ]
      },
      {
        "package-name": "exceptions",
        "version-range": "-any",
        "library": [
          {}
        ]
      },
      {
        "package-name": "text",
        "version-range": "-any",
        "library": [
          {}
        ]
      },
      {
        "package-name": "bytestring",
        "version-range": "-any",
        "library": [
          {}
        ]
      },
      {
        "package-name": "async",
        "version-range": "-any",
        "library": [
          {}
        ]
      }
    ],
    "condTreeComponents": []
  },
  "test-suites": {
    "tests": {
      "condTreeData": {
        "name": "",
        "interface": {
          "version": [
            1,
            0
          ],
          "filepath": "Main.hs"
        },
        "build-info": {
          "buildable": true,
          "buildTools": [],
          "buildToolDepends": [],
          "cppOptions": [],
          "asmOptions": [],
          "cmmOptions": [],
          "ccOptions": [],
          "cxxOptions": [],
          "ldOptions": [],
          "pkgconfigDepends": [],
          "frameworks": [],
          "extraFrameworkDirs": [],
          "asmSources": [],
          "cmmSources": [],
          "cSources": [],
          "cxxSources": [],
          "jsSources": [],
          "hsSourceDirs": [
            "test"
          ],
          "otherModules": [],
          "virtualModules": [],
          "autogenModules": [],
          "defaultLanguage": "Haskell2010",
          "otherLanguages": [],
          "defaultExtensions": [],
          "otherExtensions": [],
          "oldExtensions": [],
          "extraLibs": [],
          "extraGHCiLibs": [],
          "extraBundledLibs": [],
          "extraLibFlavours": [],
          "extraDynLibFlavours": [],
          "extraLibDirs": [],
          "includeDirs": [],
          "includes": [],
          "autogenIncludes": [],
          "installIncludes": [],
          "options": [
            [
              "-Wall",
              "-threaded",
              "-with-rtsopts=-N"
            ],
            []
          ],
          "profOptions": [
            [],
            []
          ],
          "sharedOptions": [
            [],
            []
          ],
          "staticOptions": [
            [],
            []
          ],
          "customFieldsBI": [],
          "targetBuildDepends": [
            {
              "package-name": "base",
              "version-range": ">=4.7 && <5",
              "library": [
                {}
              ]
            },
            {
              "package-name": "simple-effects",
              "version-range": "-any",
              "library": [
                {}
              ]
            }
          ],
          "mixins": []
        }
      },
      "condTreeConstraints": [
        {
          "package-name": "base",
          "version-range": ">=4.7 && <5",
          "library": [
            {}
          ]
        },
        {
          "package-name": "simple-effects",
          "version-range": "-any",
          "library": [
            {}
          ]
        }
      ],
      "condTreeComponents": []
    }
  },
  "benchmarks": {
    "bench-effects": {
      "condTreeData": {
        "name": "",
        "interface": {
          "version": [
            1,
            0
          ],
          "filepath": "Bench.hs"
        },
        "build-info": {
          "buildable": true,
          "buildTools": [],
          "buildToolDepends": [],
          "cppOptions": [],
          "asmOptions": [],
          "cmmOptions": [],
          "ccOptions": [],
          "cxxOptions": [],
          "ldOptions": [],
          "pkgconfigDepends": [],
          "frameworks": [],
          "extraFrameworkDirs": [],
          "asmSources": [],
          "cmmSources": [],
          "cSources": [],
          "cxxSources": [],
          "jsSources": [],
          "hsSourceDirs": [
            "bench"
          ],
          "otherModules": [],
          "virtualModules": [],
          "autogenModules": [],
          "defaultLanguage": "Haskell2010",
          "otherLanguages": [],
          "defaultExtensions": [],
          "otherExtensions": [],
          "oldExtensions": [],
          "extraLibs": [],
          "extraGHCiLibs": [],
          "extraBundledLibs": [],
          "extraLibFlavours": [],
          "extraDynLibFlavours": [],
          "extraLibDirs": [],
          "includeDirs": [],
          "includes": [],
          "autogenIncludes": [],
          "installIncludes": [],
          "options": [
            [
              "-O2"
            ],
            []
          ],
          "profOptions": [
            [],
            []
          ],
          "sharedOptions": [
            [],
            []
          ],
          "staticOptions": [
            [],
            []
          ],
          "customFieldsBI": [],
          "targetBuildDepends": [
            {
              "package-name": "base",
              "version-range": "-any",
              "library": [
                {}
              ]
            },
            {
              "package-name": "criterion",
              "version-range": "-any",
              "library": [
                {}
              ]
            },
            {
              "package-name": "mtl",
              "version-range": "-any",
              "library": [
                {}
              ]
            },
            {
              "package-name": "transformers",
              "version-range": "-any",
              "library": [
                {}
              ]
            },
            {
              "package-name": "simple-effects",
              "version-range": "-any",
              "library": [
                {}
              ]
            }
          ],
          "mixins": []
        }
      },
      "condTreeConstraints": [
        {
          "package-name": "base",
          "version-range": "-any",
          "library": [
            {}
          ]
        },
        {
          "package-name": "criterion",
          "version-range": "-any",
          "library": [
            {}
          ]
        },
        {
          "package-name": "mtl",
          "version-range": "-any",
          "library": [
            {}
          ]
        },
        {
          "package-name": "transformers",
          "version-range": "-any",
          "library": [
            {}
          ]
        },
        {
          "package-name": "simple-effects",
          "version-range": "-any",
          "library": [
            {}
          ]
        }
      ],
      "condTreeComponents": []
    }
  }
}
