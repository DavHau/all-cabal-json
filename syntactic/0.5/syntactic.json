{
  "description": {
    "spec-version": {
      "Right": ">=1.6"
    },
    "package": {
      "name": "syntactic",
      "version": [
        0,
        5
      ]
    },
    "license": {
      "Right": "BSD3"
    },
    "license-files": [
      "LICENSE"
    ],
    "copyright": "Copyright (c) 2011, Emil Axelsson",
    "maintainer": "emax@chalmers.se",
    "author": "Emil Axelsson",
    "stability": "",
    "tested-with": [],
    "homepage": "http://projects.haskell.org/syntactic/",
    "pkg-url": "",
    "bug-reports": "",
    "source-repos": [
      {
        "kind": {},
        "type": "Darcs",
        "location": "http://projects.haskell.org/syntactic/",
        "module": null,
        "branch": null,
        "tag": null,
        "subdir": null
      }
    ],
    "synopsis": "Generic abstract syntax, and utilities for embedded languages",
    "description": "This library provides:\n\n* Generic representation and manipulation of abstract syntax\nusing a practical encoding of open data types (based on Data\nTypes à la Carte [1])\n\n* Utilities for analyzing and transforming generic syntax\n\n* General variable binding constructs\n\n* Utilities for building extensible embedded languages based\non generic syntax\n\n* A small proof-of-concept implementation of the embedded\nlanguage Feldspar [2] (see the @Examples@ directory)\n\nNote: The library is probably mostly useful for /functional/\nobject languages, such as Feldspar. Currently, it does not\nsupport cyclic programs.\n\n\\[1\\] /Data types à la carte/, by Wouter Swierstra, in\n/Journal of Functional Programming/, 2008\n\n\\[2\\] <http://hackage.haskell.org/package/feldspar-language>",
    "category": "Language",
    "custom-fields": [],
    "build-type-raw": "Simple",
    "custom-setup": null,
    "library": null,
    "sublibraries": [],
    "executables": [],
    "foreign-libs": [],
    "test-suites": [],
    "benchmarks": [],
    "data-files": [],
    "data-dir": ".",
    "extra-source-files": [
      "Examples/ALaCarte.hs",
      "Examples/NanoFeldspar/Core.hs",
      "Examples/NanoFeldspar/Vector.hs",
      "Examples/NanoFeldspar/Test.hs"
    ],
    "extra-tmp-files": [],
    "extra-doc-files": []
  },
  "library": {
    "condTreeData": {
      "name": {},
      "exposed-modules": [
        [
          "Language",
          "Syntactic"
        ],
        [
          "Language",
          "Syntactic",
          "Syntax"
        ],
        [
          "Language",
          "Syntactic",
          "Analysis",
          "Equality"
        ],
        [
          "Language",
          "Syntactic",
          "Analysis",
          "Render"
        ],
        [
          "Language",
          "Syntactic",
          "Analysis",
          "Evaluation"
        ],
        [
          "Language",
          "Syntactic",
          "Features",
          "Annotate"
        ],
        [
          "Language",
          "Syntactic",
          "Features",
          "Symbol"
        ],
        [
          "Language",
          "Syntactic",
          "Features",
          "Literal"
        ],
        [
          "Language",
          "Syntactic",
          "Features",
          "Condition"
        ],
        [
          "Language",
          "Syntactic",
          "Features",
          "Tuple"
        ],
        [
          "Language",
          "Syntactic",
          "Features",
          "TupleSyntacticPoly"
        ],
        [
          "Language",
          "Syntactic",
          "Features",
          "Binding"
        ],
        [
          "Language",
          "Syntactic",
          "Features",
          "Binding",
          "HigherOrder"
        ],
        [
          "Language",
          "Syntactic",
          "Sharing",
          "Utils"
        ],
        [
          "Language",
          "Syntactic",
          "Sharing",
          "Graph"
        ],
        [
          "Language",
          "Syntactic",
          "Sharing",
          "StableName"
        ],
        [
          "Language",
          "Syntactic",
          "Sharing",
          "Reify"
        ],
        [
          "Language",
          "Syntactic",
          "Sharing",
          "ReifyHO"
        ]
      ],
      "re-exported-modules": [],
      "signatures": [],
      "exposed": true,
      "visibility": "LibraryVisibilityPublic",
      "build-info": {
        "buildable": true,
        "buildTools": [],
        "buildToolDepends": [],
        "cppOptions": [],
        "asmOptions": [],
        "cmmOptions": [],
        "ccOptions": [],
        "cxxOptions": [],
        "ldOptions": [],
        "pkgconfigDepends": [],
        "frameworks": [],
        "extraFrameworkDirs": [],
        "asmSources": [],
        "cmmSources": [],
        "cSources": [],
        "cxxSources": [],
        "jsSources": [],
        "hsSourceDirs": [],
        "otherModules": [],
        "virtualModules": [],
        "autogenModules": [],
        "defaultLanguage": null,
        "otherLanguages": [],
        "defaultExtensions": [],
        "otherExtensions": [],
        "oldExtensions": [
          {
            "enable-extension": "DeriveDataTypeable"
          },
          {
            "enable-extension": "FlexibleContexts"
          },
          {
            "enable-extension": "FlexibleInstances"
          },
          {
            "enable-extension": "FunctionalDependencies"
          },
          {
            "enable-extension": "GADTs"
          },
          {
            "enable-extension": "GeneralizedNewtypeDeriving"
          },
          {
            "enable-extension": "MultiParamTypeClasses"
          },
          {
            "enable-extension": "Rank2Types"
          },
          {
            "enable-extension": "ScopedTypeVariables"
          },
          {
            "enable-extension": "TypeFamilies"
          },
          {
            "enable-extension": "TypeOperators"
          },
          {
            "enable-extension": "TypeSynonymInstances"
          },
          {
            "enable-extension": "ViewPatterns"
          },
          {
            "enable-extension": "EmptyDataDecls"
          },
          {
            "enable-extension": "PatternGuards"
          }
        ],
        "extraLibs": [],
        "extraGHCiLibs": [],
        "extraBundledLibs": [],
        "extraLibFlavours": [],
        "extraDynLibFlavours": [],
        "extraLibDirs": [],
        "includeDirs": [],
        "includes": [],
        "autogenIncludes": [],
        "installIncludes": [],
        "options": [
          [],
          []
        ],
        "profOptions": [
          [],
          []
        ],
        "sharedOptions": [
          [],
          []
        ],
        "staticOptions": [
          [],
          []
        ],
        "customFieldsBI": [],
        "targetBuildDepends": [
          {
            "package-name": "array",
            "version-range": "-any",
            "library": [
              {}
            ]
          },
          {
            "package-name": "base",
            "version-range": ">=4 && <4.4",
            "library": [
              {}
            ]
          },
          {
            "package-name": "containers",
            "version-range": "-any",
            "library": [
              {}
            ]
          },
          {
            "package-name": "data-hash",
            "version-range": "-any",
            "library": [
              {}
            ]
          },
          {
            "package-name": "mtl",
            "version-range": ">=1.1 && <3",
            "library": [
              {}
            ]
          },
          {
            "package-name": "tagged",
            "version-range": "-any",
            "library": [
              {}
            ]
          },
          {
            "package-name": "transformers",
            "version-range": ">=0.2",
            "library": [
              {}
            ]
          },
          {
            "package-name": "tuple",
            "version-range": ">=0.2",
            "library": [
              {}
            ]
          }
        ],
        "mixins": []
      }
    },
    "condTreeConstraints": [
      {
        "package-name": "array",
        "version-range": "-any",
        "library": [
          {}
        ]
      },
      {
        "package-name": "base",
        "version-range": ">=4 && <4.4",
        "library": [
          {}
        ]
      },
      {
        "package-name": "containers",
        "version-range": "-any",
        "library": [
          {}
        ]
      },
      {
        "package-name": "data-hash",
        "version-range": "-any",
        "library": [
          {}
        ]
      },
      {
        "package-name": "mtl",
        "version-range": ">=1.1 && <3",
        "library": [
          {}
        ]
      },
      {
        "package-name": "tagged",
        "version-range": "-any",
        "library": [
          {}
        ]
      },
      {
        "package-name": "transformers",
        "version-range": ">=0.2",
        "library": [
          {}
        ]
      },
      {
        "package-name": "tuple",
        "version-range": ">=0.2",
        "library": [
          {}
        ]
      }
    ],
    "condTreeComponents": []
  }
}
