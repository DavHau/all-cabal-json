{
  "description": {
    "spec-version": {
      "Left": [
        1,
        12
      ]
    },
    "package": {
      "name": "monoid",
      "version": [
        0,
        1,
        9
      ]
    },
    "license": {
      "Right": "OtherLicense"
    },
    "license-files": [
      "LICENSE"
    ],
    "copyright": "Copyright (C) 2018 Luna Team",
    "maintainer": "Wojciech Danilo <wojciech.danilo@luna-lang.org>",
    "author": "Luna Team",
    "stability": "experimental",
    "tested-with": [],
    "homepage": "https://github.com/luna/monoid",
    "pkg-url": "",
    "bug-reports": "https://github.com/luna/monoid/issues",
    "source-repos": [],
    "synopsis": "Monoid type classes, designed in modular way, distinguish Monoid from Mempty and Semigroup. This design allows mempty operation don't bring Semigroups related constraints until (<>) is used.",
    "description": "",
    "category": "Data",
    "custom-fields": [],
    "build-type-raw": "Simple",
    "custom-setup": null,
    "library": null,
    "sublibraries": [],
    "executables": [],
    "foreign-libs": [],
    "test-suites": [],
    "benchmarks": [],
    "data-files": [],
    "data-dir": ".",
    "extra-source-files": [],
    "extra-tmp-files": [],
    "extra-doc-files": []
  },
  "library": {
    "condTreeData": {
      "name": {},
      "exposed-modules": [
        [
          "Data",
          "Monoids"
        ]
      ],
      "re-exported-modules": [],
      "signatures": [],
      "exposed": true,
      "visibility": "LibraryVisibilityPublic",
      "build-info": {
        "buildable": true,
        "buildTools": [],
        "buildToolDepends": [],
        "cppOptions": [],
        "asmOptions": [],
        "cmmOptions": [],
        "ccOptions": [],
        "cxxOptions": [],
        "ldOptions": [],
        "pkgconfigDepends": [],
        "frameworks": [],
        "extraFrameworkDirs": [],
        "asmSources": [],
        "cmmSources": [],
        "cSources": [],
        "cxxSources": [],
        "jsSources": [],
        "hsSourceDirs": [
          "src"
        ],
        "otherModules": [
          [
            "Paths_monoid"
          ]
        ],
        "virtualModules": [],
        "autogenModules": [],
        "defaultLanguage": "Haskell2010",
        "otherLanguages": [],
        "defaultExtensions": [
          {
            "enable-extension": "AllowAmbiguousTypes"
          },
          {
            "enable-extension": "ApplicativeDo"
          },
          {
            "enable-extension": "BangPatterns"
          },
          {
            "enable-extension": "BinaryLiterals"
          },
          {
            "enable-extension": "ConstraintKinds"
          },
          {
            "enable-extension": "DataKinds"
          },
          {
            "enable-extension": "DefaultSignatures"
          },
          {
            "enable-extension": "DeriveDataTypeable"
          },
          {
            "enable-extension": "DeriveFoldable"
          },
          {
            "enable-extension": "DeriveFunctor"
          },
          {
            "enable-extension": "DeriveGeneric"
          },
          {
            "enable-extension": "DeriveTraversable"
          },
          {
            "enable-extension": "DoAndIfThenElse"
          },
          {
            "enable-extension": "DuplicateRecordFields"
          },
          {
            "enable-extension": "EmptyDataDecls"
          },
          {
            "enable-extension": "FlexibleContexts"
          },
          {
            "enable-extension": "FlexibleInstances"
          },
          {
            "enable-extension": "FunctionalDependencies"
          },
          {
            "enable-extension": "GeneralizedNewtypeDeriving"
          },
          {
            "enable-extension": "InstanceSigs"
          },
          {
            "enable-extension": "LambdaCase"
          },
          {
            "enable-extension": "MonadComprehensions"
          },
          {
            "enable-extension": "MultiWayIf"
          },
          {
            "enable-extension": "NamedWildCards"
          },
          {
            "enable-extension": "NegativeLiterals"
          },
          {
            "disable-extension": "ImplicitPrelude"
          },
          {
            "enable-extension": "NumDecimals"
          },
          {
            "enable-extension": "OverloadedLabels"
          },
          {
            "enable-extension": "PackageImports"
          },
          {
            "enable-extension": "QuasiQuotes"
          },
          {
            "enable-extension": "PatternSynonyms"
          },
          {
            "enable-extension": "RankNTypes"
          },
          {
            "enable-extension": "RecursiveDo"
          },
          {
            "enable-extension": "ScopedTypeVariables"
          },
          {
            "enable-extension": "StandaloneDeriving"
          },
          {
            "enable-extension": "TemplateHaskell"
          },
          {
            "enable-extension": "TupleSections"
          },
          {
            "enable-extension": "TypeApplications"
          },
          {
            "enable-extension": "TypeFamilies"
          },
          {
            "enable-extension": "TypeFamilyDependencies"
          },
          {
            "enable-extension": "TypeOperators"
          },
          {
            "enable-extension": "UnicodeSyntax"
          },
          {
            "enable-extension": "ViewPatterns"
          },
          {
            "enable-extension": "LiberalTypeSynonyms"
          },
          {
            "enable-extension": "RelaxedPolyRec"
          }
        ],
        "otherExtensions": [],
        "oldExtensions": [],
        "extraLibs": [],
        "extraGHCiLibs": [],
        "extraBundledLibs": [],
        "extraLibFlavours": [],
        "extraDynLibFlavours": [],
        "extraLibDirs": [],
        "includeDirs": [],
        "includes": [],
        "autogenIncludes": [],
        "installIncludes": [],
        "options": [
          [
            "-Wall",
            "-O2"
          ],
          []
        ],
        "profOptions": [
          [],
          []
        ],
        "sharedOptions": [
          [],
          []
        ],
        "staticOptions": [
          [],
          []
        ],
        "customFieldsBI": [],
        "targetBuildDepends": [
          {
            "package-name": "base",
            "version-range": ">=4.9 && <4.13",
            "library": [
              {}
            ]
          },
          {
            "package-name": "containers",
            "version-range": "-any",
            "library": [
              {}
            ]
          },
          {
            "package-name": "lens",
            "version-range": "-any",
            "library": [
              {}
            ]
          },
          {
            "package-name": "mtl",
            "version-range": "-any",
            "library": [
              {}
            ]
          }
        ],
        "mixins": []
      }
    },
    "condTreeConstraints": [
      {
        "package-name": "base",
        "version-range": ">=4.9 && <4.13",
        "library": [
          {}
        ]
      },
      {
        "package-name": "containers",
        "version-range": "-any",
        "library": [
          {}
        ]
      },
      {
        "package-name": "lens",
        "version-range": "-any",
        "library": [
          {}
        ]
      },
      {
        "package-name": "mtl",
        "version-range": "-any",
        "library": [
          {}
        ]
      }
    ],
    "condTreeComponents": []
  }
}
