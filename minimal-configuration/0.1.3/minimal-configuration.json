{
  "description": {
    "spec-version": {
      "Right": ">=1.10"
    },
    "package": {
      "name": "minimal-configuration",
      "version": [
        0,
        1,
        3
      ]
    },
    "license": {
      "Right": "OtherLicense"
    },
    "license-files": [
      "LICENSE"
    ],
    "copyright": "",
    "maintainer": "mhitza@gmail.com",
    "author": "Marius Ghita",
    "stability": "",
    "tested-with": [],
    "homepage": "",
    "pkg-url": "",
    "bug-reports": "",
    "source-repos": [
      {
        "kind": {},
        "type": "Git",
        "location": "https://github.com/mhitza/minimal-configuration",
        "module": null,
        "branch": null,
        "tag": null,
        "subdir": null
      }
    ],
    "synopsis": "Minimal ini like configuration library with a few extras",
    "description": "The module exported provides the ability to manage a configuration file in\nthe users home directory (or the Windows equivalent). Where the configuration\ntakes the form of key=value, without sections, that for example an \\'.ini\\'\nwould have.\n\nThe library simplifies serilization/deserialization of the configuration into\na structure similar in behavior to a 'Map', as well as an interactive way to\nfill in values for simple cases.\n\nConsider the following example, where a user would run the application for the\nfirst time, it would ask him for his name; however on a followup run it would\njust print a greeting with his name.\n\n> import System.Config.File\n>\n> main = loadLocal \".apprc\" >>= \\conf -> do\n>     let name = getV conf \"name\"\n>     case name of Just n  -> putStrLn $ \"hello \" ++ n\n>                  Nothing -> do conf' <- fillInteractively conf [(\"name\", acceptNonBlank)]\n>                                saveConfiguration conf'",
    "category": "System, Configuration",
    "custom-fields": [],
    "build-type-raw": "Simple",
    "custom-setup": null,
    "library": null,
    "sublibraries": [],
    "executables": [],
    "foreign-libs": [],
    "test-suites": [],
    "benchmarks": [],
    "data-files": [],
    "data-dir": ".",
    "extra-source-files": [],
    "extra-tmp-files": [],
    "extra-doc-files": []
  },
  "library": {
    "condTreeData": {
      "name": {},
      "exposed-modules": [
        [
          "System",
          "Config",
          "File"
        ]
      ],
      "re-exported-modules": [],
      "signatures": [],
      "exposed": true,
      "visibility": "LibraryVisibilityPublic",
      "build-info": {
        "buildable": true,
        "buildTools": [],
        "buildToolDepends": [],
        "cppOptions": [],
        "asmOptions": [],
        "cmmOptions": [],
        "ccOptions": [],
        "cxxOptions": [],
        "ldOptions": [],
        "pkgconfigDepends": [],
        "frameworks": [],
        "extraFrameworkDirs": [],
        "asmSources": [],
        "cmmSources": [],
        "cSources": [],
        "cxxSources": [],
        "jsSources": [],
        "hsSourceDirs": [],
        "otherModules": [],
        "virtualModules": [],
        "autogenModules": [],
        "defaultLanguage": "Haskell98",
        "otherLanguages": [],
        "defaultExtensions": [],
        "otherExtensions": [],
        "oldExtensions": [],
        "extraLibs": [],
        "extraGHCiLibs": [],
        "extraBundledLibs": [],
        "extraLibFlavours": [],
        "extraDynLibFlavours": [],
        "extraLibDirs": [],
        "includeDirs": [],
        "includes": [],
        "autogenIncludes": [],
        "installIncludes": [],
        "options": [
          [
            "-Wall"
          ],
          []
        ],
        "profOptions": [
          [],
          []
        ],
        "sharedOptions": [
          [],
          []
        ],
        "staticOptions": [
          [],
          []
        ],
        "customFieldsBI": [],
        "targetBuildDepends": [
          {
            "package-name": "base",
            "version-range": "==4.*",
            "library": [
              {}
            ]
          },
          {
            "package-name": "directory",
            "version-range": "==1.*",
            "library": [
              {}
            ]
          },
          {
            "package-name": "filepath",
            "version-range": "==1.*",
            "library": [
              {}
            ]
          },
          {
            "package-name": "tconfig",
            "version-range": "==0.5.2",
            "library": [
              {}
            ]
          },
          {
            "package-name": "containers",
            "version-range": "==0.*",
            "library": [
              {}
            ]
          }
        ],
        "mixins": []
      }
    },
    "condTreeConstraints": [
      {
        "package-name": "base",
        "version-range": "==4.*",
        "library": [
          {}
        ]
      },
      {
        "package-name": "directory",
        "version-range": "==1.*",
        "library": [
          {}
        ]
      },
      {
        "package-name": "filepath",
        "version-range": "==1.*",
        "library": [
          {}
        ]
      },
      {
        "package-name": "tconfig",
        "version-range": "==0.5.2",
        "library": [
          {}
        ]
      },
      {
        "package-name": "containers",
        "version-range": "==0.*",
        "library": [
          {}
        ]
      }
    ],
    "condTreeComponents": []
  }
}
