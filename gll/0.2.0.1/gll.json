{
  "description": {
    "spec-version": {
      "Right": ">=1.8"
    },
    "package": {
      "name": "gll",
      "version": [
        0,
        2,
        0,
        1
      ]
    },
    "license": {
      "Right": "BSD3"
    },
    "license-files": [
      "LICENSE"
    ],
    "copyright": "",
    "maintainer": "ltvanbinsbergen@acm.org",
    "author": "L. Thomas van Binsbergen",
    "stability": "",
    "tested-with": [
      {
        "compiler": "GHC",
        "versionRange": "==7.6.3"
      }
    ],
    "homepage": "",
    "pkg-url": "",
    "bug-reports": "",
    "source-repos": [],
    "synopsis": "GLL parser with simple combinator interface ",
    "description": "GLL is a parser combinator library for writing generalised parsers.\nThe parsers can correspond to arbitrary context-free grammar, accepting\nboth non-determinism and (left-) recursion.\nThe underlying parsing algorithm is GLL (Scott and Johnstone 2013)\nThe library provides an interface in Control.Applicative style (although no\ninstance of Applicative is given).\nUsers can add arbitrary semantic with the <$> combinator.\nThere are 4 top-level functions: parse, parseString, parseWithOptions\nand parseStringWithOptions. They all return a list of semantic results,\none for each derivation. In the case that infinite derivations are possible\nonly 'good parse trees' are accepted (Ridge 2014).\nFunction parse relies on a builtin Token datatype. User-defined token-types\nare currently not supported. parseString enables parsing character strings.\nThe user is granted GLL.Combinators.Options to specify certain disambiguation\nrules.\nGLL.Combinators.MemInterface is a memoised version of the library.\nParsers are no longer pure functions and must be built inside the IO monad,\nproviding fresh memo-tables to each memo'ed non-terminal.\nSee UnitTests and MemTests for examples of using both version of\nthe library.",
    "category": "Compilers",
    "custom-fields": [],
    "build-type-raw": "Simple",
    "custom-setup": null,
    "library": null,
    "sublibraries": [],
    "executables": [],
    "foreign-libs": [],
    "test-suites": [],
    "benchmarks": [],
    "data-files": [],
    "data-dir": ".",
    "extra-source-files": [],
    "extra-tmp-files": [],
    "extra-doc-files": []
  },
  "library": {
    "condTreeData": {
      "name": {},
      "exposed-modules": [
        [
          "GLL",
          "Combinators",
          "Interface"
        ],
        [
          "GLL",
          "Combinators",
          "MemInterface"
        ],
        [
          "GLL",
          "Combinators",
          "Options"
        ],
        [
          "UnitTests"
        ],
        [
          "MemTests"
        ]
      ],
      "re-exported-modules": [],
      "signatures": [],
      "exposed": true,
      "visibility": "LibraryVisibilityPublic",
      "build-info": {
        "buildable": true,
        "buildTools": [],
        "buildToolDepends": [],
        "cppOptions": [],
        "asmOptions": [],
        "cmmOptions": [],
        "ccOptions": [],
        "cxxOptions": [],
        "ldOptions": [],
        "pkgconfigDepends": [],
        "frameworks": [],
        "extraFrameworkDirs": [],
        "asmSources": [],
        "cmmSources": [],
        "cSources": [],
        "cxxSources": [],
        "jsSources": [],
        "hsSourceDirs": [
          "src",
          "tests/interface"
        ],
        "otherModules": [
          [
            "GLL",
            "Types",
            "Abstract"
          ],
          [
            "GLL",
            "Types",
            "Grammar"
          ],
          [
            "GLL",
            "Parser"
          ],
          [
            "GLL",
            "Common"
          ]
        ],
        "virtualModules": [],
        "autogenModules": [],
        "defaultLanguage": null,
        "otherLanguages": [],
        "defaultExtensions": [],
        "otherExtensions": [],
        "oldExtensions": [
          {
            "enable-extension": "TypeOperators"
          },
          {
            "enable-extension": "FlexibleInstances"
          },
          {
            "enable-extension": "ScopedTypeVariables"
          },
          {
            "enable-extension": "TypeSynonymInstances"
          }
        ],
        "extraLibs": [],
        "extraGHCiLibs": [],
        "extraBundledLibs": [],
        "extraLibFlavours": [],
        "extraDynLibFlavours": [],
        "extraLibDirs": [],
        "includeDirs": [],
        "includes": [],
        "autogenIncludes": [],
        "installIncludes": [],
        "options": [
          [],
          []
        ],
        "profOptions": [
          [],
          []
        ],
        "sharedOptions": [
          [],
          []
        ],
        "staticOptions": [
          [],
          []
        ],
        "customFieldsBI": [],
        "targetBuildDepends": [
          {
            "package-name": "base",
            "version-range": ">=4.5 && <=4.8.0.0",
            "library": [
              {}
            ]
          },
          {
            "package-name": "containers",
            "version-range": ">=0.4",
            "library": [
              {}
            ]
          },
          {
            "package-name": "array",
            "version-range": "-any",
            "library": [
              {}
            ]
          },
          {
            "package-name": "TypeCompose",
            "version-range": "-any",
            "library": [
              {}
            ]
          }
        ],
        "mixins": []
      }
    },
    "condTreeConstraints": [
      {
        "package-name": "base",
        "version-range": ">=4.5 && <=4.8.0.0",
        "library": [
          {}
        ]
      },
      {
        "package-name": "containers",
        "version-range": ">=0.4",
        "library": [
          {}
        ]
      },
      {
        "package-name": "array",
        "version-range": "-any",
        "library": [
          {}
        ]
      },
      {
        "package-name": "TypeCompose",
        "version-range": "-any",
        "library": [
          {}
        ]
      }
    ],
    "condTreeComponents": []
  }
}
