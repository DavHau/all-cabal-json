{
  "description": {
    "spec-version": {
      "Right": ">=1.7"
    },
    "package": {
      "name": "codo-notation",
      "version": [
        0,
        5,
        2
      ]
    },
    "license": {
      "Right": "BSD3"
    },
    "license-files": [
      "LICENSE"
    ],
    "copyright": "",
    "maintainer": "Dominic Orchard <dom.orchard@gmail.com>",
    "author": "Dominic Orchard <dom.orchard@gmail.com>",
    "stability": "experimental",
    "tested-with": [],
    "homepage": "",
    "pkg-url": "",
    "bug-reports": "",
    "source-repos": [
      {
        "kind": {},
        "type": "Git",
        "location": "git://github.com/dorchard/codo-notation.git",
        "module": null,
        "branch": null,
        "tag": null,
        "subdir": null
      }
    ],
    "synopsis": "A notation for comonads, analogous to the do-notation for monads.",
    "description": "A notation for comonads, analogous to the do-notation for monads.\n\nRequires the @TemplateHaskell@ and @QuasiQuotes@ extensions.\n\nExample 1:\n\n@\n&#x7b;-\\# LANGUAGE TemplateHaskell \\#-&#x7d;\n&#x7b;-\\# LANGUAGE QuasiQuotes \\#-&#x7d;\n\nimport Control.Comonad\nimport Language.Haskell.Codo\n\nfoo :: (Comonad c, Num a) => c a -> a\nfoo = [codo| x => extract x + 1 |]\n@\n\nExample 2:\n\n@\nimport Data.Monoid\ninstance Monoid Double where\n&#x20;&#x20;&#x20;    mempty = 0.0\n&#x20;&#x20;&#x20;    mappend = (+)\n\ndifferentiate f = ((f 0.001) - f 0) / 0.001\n\nminima :: (Double -> Double) -> Bool\nminima = [codo| f => f'  <- differentiate f\n&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20; f'' <- differentiate f'\n&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20;&#x20; (extract f' &#60; 0.001) && (extract f'' &#62; 0) |]\n@\n\nFurther explanation of the syntax can be found in the following (short) paper: <http://www.cl.cam.ac.uk/~dao29/drafts/codo-notation-orchard-ifl12.pdf> with a numer of examples.\n\nFurther examples can be found here: <https://github.com/dorchard/codo-notation>.",
    "category": "Language",
    "custom-fields": [],
    "build-type-raw": "Simple",
    "custom-setup": null,
    "library": null,
    "sublibraries": [],
    "executables": [],
    "foreign-libs": [],
    "test-suites": [],
    "benchmarks": [],
    "data-files": [],
    "data-dir": ".",
    "extra-source-files": [],
    "extra-tmp-files": [],
    "extra-doc-files": []
  },
  "library": {
    "condTreeData": {
      "name": {},
      "exposed-modules": [
        [
          "Language",
          "Haskell",
          "Codo"
        ]
      ],
      "re-exported-modules": [],
      "signatures": [],
      "exposed": true,
      "visibility": "LibraryVisibilityPublic",
      "build-info": {
        "buildable": true,
        "buildTools": [],
        "buildToolDepends": [],
        "cppOptions": [],
        "asmOptions": [],
        "cmmOptions": [],
        "ccOptions": [],
        "cxxOptions": [],
        "ldOptions": [],
        "pkgconfigDepends": [],
        "frameworks": [],
        "extraFrameworkDirs": [],
        "asmSources": [],
        "cmmSources": [],
        "cSources": [],
        "cxxSources": [],
        "jsSources": [],
        "hsSourceDirs": [
          "src"
        ],
        "otherModules": [],
        "virtualModules": [],
        "autogenModules": [],
        "defaultLanguage": null,
        "otherLanguages": [],
        "defaultExtensions": [],
        "otherExtensions": [],
        "oldExtensions": [],
        "extraLibs": [],
        "extraGHCiLibs": [],
        "extraBundledLibs": [],
        "extraLibFlavours": [],
        "extraDynLibFlavours": [],
        "extraLibDirs": [],
        "includeDirs": [],
        "includes": [],
        "autogenIncludes": [],
        "installIncludes": [],
        "options": [
          [],
          []
        ],
        "profOptions": [
          [],
          []
        ],
        "sharedOptions": [
          [],
          []
        ],
        "staticOptions": [
          [],
          []
        ],
        "customFieldsBI": [],
        "targetBuildDepends": [
          {
            "package-name": "base",
            "version-range": ">=4.2 && <5",
            "library": [
              {}
            ]
          },
          {
            "package-name": "comonad",
            "version-range": ">=3",
            "library": [
              {}
            ]
          },
          {
            "package-name": "template-haskell",
            "version-range": ">=2.7",
            "library": [
              {}
            ]
          },
          {
            "package-name": "haskell-src-meta",
            "version-range": ">=0.5.1",
            "library": [
              {}
            ]
          },
          {
            "package-name": "parsec",
            "version-range": ">=3",
            "library": [
              {}
            ]
          },
          {
            "package-name": "uniplate",
            "version-range": ">=1.6",
            "library": [
              {}
            ]
          }
        ],
        "mixins": []
      }
    },
    "condTreeConstraints": [
      {
        "package-name": "base",
        "version-range": ">=4.2 && <5",
        "library": [
          {}
        ]
      },
      {
        "package-name": "comonad",
        "version-range": ">=3",
        "library": [
          {}
        ]
      },
      {
        "package-name": "template-haskell",
        "version-range": ">=2.7",
        "library": [
          {}
        ]
      },
      {
        "package-name": "haskell-src-meta",
        "version-range": ">=0.5.1",
        "library": [
          {}
        ]
      },
      {
        "package-name": "parsec",
        "version-range": ">=3",
        "library": [
          {}
        ]
      },
      {
        "package-name": "uniplate",
        "version-range": ">=1.6",
        "library": [
          {}
        ]
      }
    ],
    "condTreeComponents": []
  }
}
