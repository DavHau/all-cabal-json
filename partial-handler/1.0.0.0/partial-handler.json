{
  "description": {
    "spec-version": {
      "Right": ">=1.10"
    },
    "package": {
      "name": "partial-handler",
      "version": [
        1,
        0,
        0,
        0
      ]
    },
    "license": {
      "Right": "MIT"
    },
    "license-files": [
      "LICENSE"
    ],
    "copyright": "(c) 2014, Nikita Volkov",
    "maintainer": "Nikita Volkov <nikita.y.volkov@mail.ru>",
    "author": "Nikita Volkov <nikita.y.volkov@mail.ru>",
    "stability": "",
    "tested-with": [],
    "homepage": "https://github.com/nikita-volkov/partial-handler ",
    "pkg-url": "",
    "bug-reports": "https://github.com/nikita-volkov/partial-handler/issues ",
    "source-repos": [
      {
        "kind": {},
        "type": "Git",
        "location": "git://github.com/nikita-volkov/partial-handler.git",
        "module": null,
        "branch": null,
        "tag": null,
        "subdir": null
      }
    ],
    "synopsis": "A composable exception handler",
    "description": "If you have ever had to compose an exception handler for exceptions of multiple types,\nyou know how frustraiting it can get.\nThis library approaches this issue by providing a composable exception handler type,\nwhich has a Monoid instance.\n\nComposability means that you can define custom partial handlers and\nreuse them by composing other handlers from them.\n\nHere is an example of a composable partial handler,\nwhich only defines what to do in case of a ThreadKilled exception\n(the code uses the LambdaCase extension):\n\n>ignoreThreadKilled :: PartialHandler ()\n>ignoreThreadKilled =\n>  typed $ \\case\n>    ThreadKilled -> Just $ return ()\n>    _ -> Nothing\n\nHere's how you can construct a handler of type @SomeException -> IO ()@\nusing this library:\n\n>totalizeRethrowing $\n>  ignoreThreadKilled <>\n>  onAlreadyExists (putStrLn \"Already exists\")\n\nand here is how you would do it traditionally (with the MultiWayIf extension):\n\n>\\e -> if\n>  | Just ThreadKilled <- fromException e ->\n>      return ()\n>  | Just e' <- fromException e, isAlreadyExistsError e' ->\n>      putStrLn \"Already exists\"\n>  | otherwise ->\n>      throwIO e\n\nPutting all the syntactic trickery to make it shorter aside,\nthis handler is a monolith block of code.\nUnlike with PartialHandler you can neither decompose it into simpler ones,\nnor compose it with other handlers to form a more complex one.",
    "category": "Exceptions, Error Handling, Failure",
    "custom-fields": [
      [
        "x-revision",
        "1"
      ]
    ],
    "build-type-raw": "Simple",
    "custom-setup": null,
    "library": null,
    "sublibraries": [],
    "executables": [],
    "foreign-libs": [],
    "test-suites": [],
    "benchmarks": [],
    "data-files": [],
    "data-dir": ".",
    "extra-source-files": [],
    "extra-tmp-files": [],
    "extra-doc-files": []
  },
  "library": {
    "condTreeData": {
      "name": {},
      "exposed-modules": [
        [
          "PartialHandler"
        ]
      ],
      "re-exported-modules": [],
      "signatures": [],
      "exposed": true,
      "visibility": "LibraryVisibilityPublic",
      "build-info": {
        "buildable": true,
        "buildTools": [],
        "buildToolDepends": [],
        "cppOptions": [],
        "asmOptions": [],
        "cmmOptions": [],
        "ccOptions": [],
        "cxxOptions": [],
        "ldOptions": [],
        "pkgconfigDepends": [],
        "frameworks": [],
        "extraFrameworkDirs": [],
        "asmSources": [],
        "cmmSources": [],
        "cSources": [],
        "cxxSources": [],
        "jsSources": [],
        "hsSourceDirs": [
          "library"
        ],
        "otherModules": [],
        "virtualModules": [],
        "autogenModules": [],
        "defaultLanguage": "Haskell2010",
        "otherLanguages": [],
        "defaultExtensions": [
          {
            "enable-extension": "LambdaCase"
          }
        ],
        "otherExtensions": [],
        "oldExtensions": [],
        "extraLibs": [],
        "extraGHCiLibs": [],
        "extraBundledLibs": [],
        "extraLibFlavours": [],
        "extraDynLibFlavours": [],
        "extraLibDirs": [],
        "includeDirs": [],
        "includes": [],
        "autogenIncludes": [],
        "installIncludes": [],
        "options": [
          [
            "-funbox-strict-fields"
          ],
          []
        ],
        "profOptions": [
          [],
          []
        ],
        "sharedOptions": [
          [],
          []
        ],
        "staticOptions": [
          [],
          []
        ],
        "customFieldsBI": [],
        "targetBuildDepends": [
          {
            "package-name": "base",
            "version-range": ">=4.6 && <4.9",
            "library": [
              {}
            ]
          }
        ],
        "mixins": []
      }
    },
    "condTreeConstraints": [
      {
        "package-name": "base",
        "version-range": ">=4.6 && <4.9",
        "library": [
          {}
        ]
      }
    ],
    "condTreeComponents": []
  }
}
