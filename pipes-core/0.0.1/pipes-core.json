{
  "description": {
    "spec-version": {
      "Right": ">=1.10.1"
    },
    "package": {
      "name": "pipes-core",
      "version": [
        0,
        0,
        1
      ]
    },
    "license": {
      "Right": "BSD3"
    },
    "license-files": [
      "LICENSE"
    ],
    "copyright": "2012 Gabriel Gonzalez, 2012 Paolo Capriotti",
    "maintainer": "p.capriotti@gmail.com",
    "author": "Gabriel Gonzalez, Paolo Capriotti",
    "stability": "Experimental",
    "tested-with": [
      {
        "compiler": "GHC",
        "versionRange": "==7.0.3"
      }
    ],
    "homepage": "https://github.com/pcapriotti/pipes-core",
    "pkg-url": "",
    "bug-reports": "https://github.com/pcapriotti/pipes-core/issues",
    "source-repos": [
      {
        "kind": {},
        "type": "Git",
        "location": "https://github.com/pcapriotti/pipes-core",
        "module": null,
        "branch": null,
        "tag": null,
        "subdir": null
      }
    ],
    "synopsis": "Compositional pipelines",
    "description": "This library offers an abstraction similar in scope to\niteratees\\/enumerators\\/enumeratees, but with different characteristics and\nnaming conventions.\n\nDifference with traditional iteratees:\n\n* /Simpler semantics/: There is only one data type ('Pipe'), two primitives\n('await' and 'yield'), and only one way to compose 'Pipe's ('>+>').  In\nfact, ('>+>') is just convenient syntax for the composition operator in\n'Category'. Most pipes can be implemented just using the 'Monad' instance\nand composition.\n\n* /Different naming conventions/: Enumeratees are called 'Pipe's, Enumerators\nare 'Producer's, and Iteratees are 'Consumer's.  'Producer's and 'Consumer's\nare just type synonyms for 'Pipe's with either the input or output end\nclosed.\n\n* /Pipes form a Category/: that means that composition is associative, and\nthat there is an identity 'Pipe'.\n\n* /\"Vertical\" concatenation works on every 'Pipe'/: ('>>'),\nconcatenates 'Pipe's. Since everything is a 'Pipe', you can use it to\nconcatenate 'Producer's, 'Consumer's, and even intermediate 'Pipe' stages.\nVertical concatenation can be combined with composition to create elaborate\ncombinators, without the need of executing pipes in \\\"passes\\\" or resuming\npartially executed pipes.\n\nCheck out \"Control.Pipe\" for a copious introduction (in the spirit of the\n@iterIO@ library), and \"Control.Pipe.Combinators\" for some basic combinators\nand 'Pipe' examples.",
    "category": "Control, Enumerator",
    "custom-fields": [],
    "build-type-raw": "Simple",
    "custom-setup": null,
    "library": null,
    "sublibraries": [],
    "executables": [],
    "foreign-libs": [],
    "test-suites": [],
    "benchmarks": [],
    "data-files": [],
    "data-dir": ".",
    "extra-source-files": [],
    "extra-tmp-files": [],
    "extra-doc-files": []
  },
  "library": {
    "condTreeData": {
      "name": {},
      "exposed-modules": [
        [
          "Control",
          "Pipe"
        ],
        [
          "Control",
          "Pipe",
          "Category"
        ],
        [
          "Control",
          "Pipe",
          "Combinators"
        ],
        [
          "Control",
          "Pipe",
          "Common"
        ],
        [
          "Control",
          "Pipe",
          "Exception"
        ],
        [
          "Control",
          "Pipe",
          "Monoidal"
        ],
        [
          "Control",
          "Category",
          "Multiplicative"
        ]
      ],
      "re-exported-modules": [],
      "signatures": [],
      "exposed": true,
      "visibility": "LibraryVisibilityPublic",
      "build-info": {
        "buildable": true,
        "buildTools": [],
        "buildToolDepends": [],
        "cppOptions": [],
        "asmOptions": [],
        "cmmOptions": [],
        "ccOptions": [],
        "cxxOptions": [],
        "ldOptions": [],
        "pkgconfigDepends": [],
        "frameworks": [],
        "extraFrameworkDirs": [],
        "asmSources": [],
        "cmmSources": [],
        "cSources": [],
        "cxxSources": [],
        "jsSources": [],
        "hsSourceDirs": [],
        "otherModules": [],
        "virtualModules": [],
        "autogenModules": [],
        "defaultLanguage": "Haskell2010",
        "otherLanguages": [],
        "defaultExtensions": [],
        "otherExtensions": [],
        "oldExtensions": [],
        "extraLibs": [],
        "extraGHCiLibs": [],
        "extraBundledLibs": [],
        "extraLibFlavours": [],
        "extraDynLibFlavours": [],
        "extraLibDirs": [],
        "includeDirs": [],
        "includes": [],
        "autogenIncludes": [],
        "installIncludes": [],
        "options": [
          [],
          []
        ],
        "profOptions": [
          [],
          []
        ],
        "sharedOptions": [
          [],
          []
        ],
        "staticOptions": [
          [],
          []
        ],
        "customFieldsBI": [],
        "targetBuildDepends": [
          {
            "package-name": "base",
            "version-range": ">=4 && <5",
            "library": [
              {}
            ]
          },
          {
            "package-name": "mtl",
            "version-range": "-any",
            "library": [
              {}
            ]
          },
          {
            "package-name": "categories",
            "version-range": "-any",
            "library": [
              {}
            ]
          },
          {
            "package-name": "void",
            "version-range": "-any",
            "library": [
              {}
            ]
          },
          {
            "package-name": "lifted-base",
            "version-range": "-any",
            "library": [
              {}
            ]
          },
          {
            "package-name": "monad-control",
            "version-range": "-any",
            "library": [
              {}
            ]
          }
        ],
        "mixins": []
      }
    },
    "condTreeConstraints": [
      {
        "package-name": "base",
        "version-range": ">=4 && <5",
        "library": [
          {}
        ]
      },
      {
        "package-name": "mtl",
        "version-range": "-any",
        "library": [
          {}
        ]
      },
      {
        "package-name": "categories",
        "version-range": "-any",
        "library": [
          {}
        ]
      },
      {
        "package-name": "void",
        "version-range": "-any",
        "library": [
          {}
        ]
      },
      {
        "package-name": "lifted-base",
        "version-range": "-any",
        "library": [
          {}
        ]
      },
      {
        "package-name": "monad-control",
        "version-range": "-any",
        "library": [
          {}
        ]
      }
    ],
    "condTreeComponents": []
  }
}
