{
  "description": {
    "spec-version": {
      "Right": ">=1.6"
    },
    "package": {
      "name": "chan-split",
      "version": [
        0,
        5,
        0
      ]
    },
    "license": {
      "Right": "BSD3"
    },
    "license-files": [
      "LICENSE"
    ],
    "copyright": "",
    "maintainer": "brandon.m.simmons@gmail.com",
    "author": "Brandon Simmons",
    "stability": "",
    "tested-with": [],
    "homepage": "http://brandon.si/code/module-chan-split-released/",
    "pkg-url": "",
    "bug-reports": "",
    "source-repos": [
      {
        "kind": {},
        "type": "Git",
        "location": "https://github.com/jberryman/chan-split.git",
        "module": null,
        "branch": null,
        "tag": null,
        "subdir": null
      }
    ],
    "synopsis": "Concurrent Chans as read/write pairs. Also provides generic\nChan pair class.",
    "description": "An implementation of concurrent channels identical to\nControl.Concurrent.Chan, except that the channel is\nrepresented as a pair, one of which allows only read\noperations, the other write operations.\n\nThis makes code easier to reason about (the types strictly\ndelegate read/write permission), suggests useful instances\n(e.g.  'Functor' and 'Contravariant' are easily defined)\non the chan pairs, and simplifies the API.\n\nFurthermore this allows messages sent to channels with no\nreaders to be trivially garbage-collected, without relying\non inlining optimizations.\n\nWe also provide a module that defines a class 'SplitChan'\nwhich defines the basic methods any pair of Chan types\nshould provide, allowing easy swapping of Chan\nimplementations.\n\nTo use standard Chans with these polymorphic functions,\nimport as follows:\n\n> import Control.Concurrent.Chan hiding (readChan,writeChan,writeList2Chan)\n> import Control.Concurrent.Chan.Class\n\nWhen used alongside standard Chans, the Split module can be\nimported qualified like:\n\n> import qualified Control.Concurrent.Chan.Split as S\n\nIts interface is mostly backwards compatible with Chan.\nNote, we do not implement the deprecated unGetChan and\nisEmptyChan functions.\n\nThis module is used internally by the \"simple-actors\" package.\n\n/CHANGES/: 0.4.0 -> 0.5.0\n\n- modify TChan v2.4 code into split version\n\n- depend on STM\n\n- clean up Extensions section and broken links\n",
    "category": "Concurrency",
    "custom-fields": [],
    "build-type-raw": "Simple",
    "custom-setup": null,
    "library": null,
    "sublibraries": [],
    "executables": [],
    "foreign-libs": [],
    "test-suites": [],
    "benchmarks": [],
    "data-files": [],
    "data-dir": ".",
    "extra-source-files": [],
    "extra-tmp-files": [],
    "extra-doc-files": []
  },
  "library": {
    "condTreeData": {
      "name": {},
      "exposed-modules": [
        [
          "Control",
          "Concurrent",
          "Chan",
          "Split"
        ],
        [
          "Control",
          "Concurrent",
          "Chan",
          "Class"
        ],
        [
          "Control",
          "Concurrent",
          "STM",
          "TChan",
          "Class"
        ],
        [
          "Control",
          "Concurrent",
          "STM",
          "TChan",
          "Split"
        ]
      ],
      "re-exported-modules": [],
      "signatures": [],
      "exposed": true,
      "visibility": "LibraryVisibilityPublic",
      "build-info": {
        "buildable": true,
        "buildTools": [],
        "buildToolDepends": [],
        "cppOptions": [],
        "asmOptions": [],
        "cmmOptions": [],
        "ccOptions": [],
        "cxxOptions": [],
        "ldOptions": [],
        "pkgconfigDepends": [],
        "frameworks": [],
        "extraFrameworkDirs": [],
        "asmSources": [],
        "cmmSources": [],
        "cSources": [],
        "cxxSources": [],
        "jsSources": [],
        "hsSourceDirs": [],
        "otherModules": [],
        "virtualModules": [],
        "autogenModules": [],
        "defaultLanguage": null,
        "otherLanguages": [],
        "defaultExtensions": [],
        "otherExtensions": [],
        "oldExtensions": [
          {
            "enable-extension": "MultiParamTypeClasses"
          },
          {
            "enable-extension": "FunctionalDependencies"
          }
        ],
        "extraLibs": [],
        "extraGHCiLibs": [],
        "extraBundledLibs": [],
        "extraLibFlavours": [],
        "extraDynLibFlavours": [],
        "extraLibDirs": [],
        "includeDirs": [],
        "includes": [],
        "autogenIncludes": [],
        "installIncludes": [],
        "options": [
          [
            "-Wall"
          ],
          []
        ],
        "profOptions": [
          [],
          []
        ],
        "sharedOptions": [
          [],
          []
        ],
        "staticOptions": [
          [],
          []
        ],
        "customFieldsBI": [],
        "targetBuildDepends": [
          {
            "package-name": "base",
            "version-range": ">=4 && <5",
            "library": [
              {}
            ]
          },
          {
            "package-name": "stm",
            "version-range": ">2 && <3",
            "library": [
              {}
            ]
          }
        ],
        "mixins": []
      }
    },
    "condTreeConstraints": [
      {
        "package-name": "base",
        "version-range": ">=4 && <5",
        "library": [
          {}
        ]
      },
      {
        "package-name": "stm",
        "version-range": ">2 && <3",
        "library": [
          {}
        ]
      }
    ],
    "condTreeComponents": []
  }
}
